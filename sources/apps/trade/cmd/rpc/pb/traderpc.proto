syntax = "proto3";

option go_package = "./pb";

package pb;

// ------------------------------------ 
// Messages
// ------------------------------------ 

//--------------------------------产品信息--------------------------------
message Product {
  int64 ID = 1; //产品id
  int64 UUID = 2; //产品唯一标识
  string name = 3; //产品名称
  int64 type = 4; //产品分类(与资源分类一致)
  int64 owner = 5; //产品所属发布人
  int64 productBind = 6; //绑定的资源id
  double price = 7; //产品价格
  int64 saled = 8; //是否已销售 0 no 1 yes
  string productPoster = 9; // 产品头图
  int64 createTime = 10; //创建时间
  int64 updateTime = 11; //更新时间
}

message AddProductReq {
  string name = 1; //产品名称
  int64 type = 2; //产品分类(与资源分类一致)
  int64 productBind = 3; //绑定的资源id
  int64 owner = 4; //产品所属发布人
  double price = 5; //产品价格
  string productPoster = 6; // 产品头图
}

message AddProductResp {
}

message UpdateProductReq {
  int64 ID = 1; //产品id
  int64 UUID = 2; //产品唯一标识
  string name = 3; //产品名称
  int64 type = 4; //产品分类(与资源分类一致)
  double price = 5; //产品价格
  int64 saled = 6; //是否已销售 0 no 1 yes
  string productPoster = 7; // 产品头图
}

message UpdateProductResp {
}

message DelProductReq {
  int64 ID = 1; //id
  int64 UUID = 2; //产品唯一标识
}

message DelProductResp {
}

message GetProductByIdReq {
  int64 ID = 1; //id
  int64 UUID = 2; //产品唯一标识
}

message GetProductByIdResp {
  Product product = 1; //product
}


message SearchProductByConditionReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 type = 3; //产品分类(与资源分类一致)
  string name = 4; //产品名称
  double bottomPrice = 5; //低价
  double topPrice = 6; //最高价
  bool  desc = 7; //是否降序，默认升序
  // 默认未销售
}

message SearchProductByConditionResp {
  repeated Product product = 1; //product
}

message SearchProductByResourcesBindReq{
  int64 resourceId = 1; // 资源id
}
message SearchProductByResourcesBindResp{
  int64 productId = 1; // 商品id
  string productName = 2; // 商品名称
}
message GetProductBindByProductIdReq{
  int64 productId = 1;//产品Id
}
message GetProductBindByProductIdResp{
  int64 resourcesBind = 1;// 资源绑定Id
}

message GetProductIdAndProductNameReq{
  repeated int64 productId = 1; // 产品id
  bool isDelete = 2; // 是否软删除
}

message ProductNameAndIdBindId{
  int64 productId = 1;// 产品id
  string productName = 2;// 产品名称
  int64 resourceId = 3;// 绑定的资源id
}

// 资源绑定的产品id、产品名称、资源id
message GetProductIdAndProductNameResp{
  repeated ProductNameAndIdBindId productInfo = 1; // 产品绑定的资源id和产品名称
}
message GetProductByBindIdAndOwnerReq{
  int64 uid =1;
  int64 productBind =2;
}

message GetProductByBindIdAndOwnerResp{
  Product product = 1; //product
}
// ------------------------------------ 
// Rpc Func
// ------------------------------------ 

service traderpc{

  //-----------------------产品信息-----------------------
  rpc AddProduct(AddProductReq) returns (AddProductResp);
  rpc UpdateProduct(UpdateProductReq) returns (UpdateProductResp);
  rpc DelProduct(DelProductReq) returns (DelProductResp);
  rpc GetProductById(GetProductByIdReq) returns (GetProductByIdResp);
  rpc SearchProduct(SearchProductByConditionReq) returns (SearchProductByConditionResp);
  rpc SearchProductByResourcesBind(SearchProductByResourcesBindReq) returns(SearchProductByResourcesBindResp);
  rpc GetProductBindByProductId(GetProductBindByProductIdReq)returns(GetProductBindByProductIdResp);
  // 通过商品id获取商品名称
  rpc GetProductIdAndProductName(GetProductIdAndProductNameReq) returns(GetProductIdAndProductNameResp);
  // 通过商品绑定用户和绑定商品查询商品详情
  rpc GetProductByBindIdAndOwner(GetProductByBindIdAndOwnerReq)returns(GetProductByBindIdAndOwnerResp);
}
