// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: traderpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Traderpc_AddProduct_FullMethodName                   = "/pb.traderpc/AddProduct"
	Traderpc_UpdateProduct_FullMethodName                = "/pb.traderpc/UpdateProduct"
	Traderpc_DelProduct_FullMethodName                   = "/pb.traderpc/DelProduct"
	Traderpc_GetProductById_FullMethodName               = "/pb.traderpc/GetProductById"
	Traderpc_SearchProduct_FullMethodName                = "/pb.traderpc/SearchProduct"
	Traderpc_SearchProductByResourcesBind_FullMethodName = "/pb.traderpc/SearchProductByResourcesBind"
	Traderpc_GetProductBindByProductId_FullMethodName    = "/pb.traderpc/GetProductBindByProductId"
	Traderpc_GetProductIdAndProductName_FullMethodName   = "/pb.traderpc/GetProductIdAndProductName"
	Traderpc_GetProductByBindIdAndOwner_FullMethodName   = "/pb.traderpc/GetProductByBindIdAndOwner"
)

// TraderpcClient is the client API for Traderpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraderpcClient interface {
	// -----------------------产品信息-----------------------
	AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductResp, error)
	UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error)
	DelProduct(ctx context.Context, in *DelProductReq, opts ...grpc.CallOption) (*DelProductResp, error)
	GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdResp, error)
	SearchProduct(ctx context.Context, in *SearchProductByConditionReq, opts ...grpc.CallOption) (*SearchProductByConditionResp, error)
	SearchProductByResourcesBind(ctx context.Context, in *SearchProductByResourcesBindReq, opts ...grpc.CallOption) (*SearchProductByResourcesBindResp, error)
	GetProductBindByProductId(ctx context.Context, in *GetProductBindByProductIdReq, opts ...grpc.CallOption) (*GetProductBindByProductIdResp, error)
	// 通过商品id获取商品名称
	GetProductIdAndProductName(ctx context.Context, in *GetProductIdAndProductNameReq, opts ...grpc.CallOption) (*GetProductIdAndProductNameResp, error)
	// 通过商品绑定用户和绑定商品查询商品详情
	GetProductByBindIdAndOwner(ctx context.Context, in *GetProductByBindIdAndOwnerReq, opts ...grpc.CallOption) (*GetProductByBindIdAndOwnerResp, error)
}

type traderpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTraderpcClient(cc grpc.ClientConnInterface) TraderpcClient {
	return &traderpcClient{cc}
}

func (c *traderpcClient) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*AddProductResp, error) {
	out := new(AddProductResp)
	err := c.cc.Invoke(ctx, Traderpc_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error) {
	out := new(UpdateProductResp)
	err := c.cc.Invoke(ctx, Traderpc_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) DelProduct(ctx context.Context, in *DelProductReq, opts ...grpc.CallOption) (*DelProductResp, error) {
	out := new(DelProductResp)
	err := c.cc.Invoke(ctx, Traderpc_DelProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdResp, error) {
	out := new(GetProductByIdResp)
	err := c.cc.Invoke(ctx, Traderpc_GetProductById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) SearchProduct(ctx context.Context, in *SearchProductByConditionReq, opts ...grpc.CallOption) (*SearchProductByConditionResp, error) {
	out := new(SearchProductByConditionResp)
	err := c.cc.Invoke(ctx, Traderpc_SearchProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) SearchProductByResourcesBind(ctx context.Context, in *SearchProductByResourcesBindReq, opts ...grpc.CallOption) (*SearchProductByResourcesBindResp, error) {
	out := new(SearchProductByResourcesBindResp)
	err := c.cc.Invoke(ctx, Traderpc_SearchProductByResourcesBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) GetProductBindByProductId(ctx context.Context, in *GetProductBindByProductIdReq, opts ...grpc.CallOption) (*GetProductBindByProductIdResp, error) {
	out := new(GetProductBindByProductIdResp)
	err := c.cc.Invoke(ctx, Traderpc_GetProductBindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) GetProductIdAndProductName(ctx context.Context, in *GetProductIdAndProductNameReq, opts ...grpc.CallOption) (*GetProductIdAndProductNameResp, error) {
	out := new(GetProductIdAndProductNameResp)
	err := c.cc.Invoke(ctx, Traderpc_GetProductIdAndProductName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderpcClient) GetProductByBindIdAndOwner(ctx context.Context, in *GetProductByBindIdAndOwnerReq, opts ...grpc.CallOption) (*GetProductByBindIdAndOwnerResp, error) {
	out := new(GetProductByBindIdAndOwnerResp)
	err := c.cc.Invoke(ctx, Traderpc_GetProductByBindIdAndOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraderpcServer is the server API for Traderpc service.
// All implementations must embed UnimplementedTraderpcServer
// for forward compatibility
type TraderpcServer interface {
	// -----------------------产品信息-----------------------
	AddProduct(context.Context, *AddProductReq) (*AddProductResp, error)
	UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error)
	DelProduct(context.Context, *DelProductReq) (*DelProductResp, error)
	GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdResp, error)
	SearchProduct(context.Context, *SearchProductByConditionReq) (*SearchProductByConditionResp, error)
	SearchProductByResourcesBind(context.Context, *SearchProductByResourcesBindReq) (*SearchProductByResourcesBindResp, error)
	GetProductBindByProductId(context.Context, *GetProductBindByProductIdReq) (*GetProductBindByProductIdResp, error)
	// 通过商品id获取商品名称
	GetProductIdAndProductName(context.Context, *GetProductIdAndProductNameReq) (*GetProductIdAndProductNameResp, error)
	// 通过商品绑定用户和绑定商品查询商品详情
	GetProductByBindIdAndOwner(context.Context, *GetProductByBindIdAndOwnerReq) (*GetProductByBindIdAndOwnerResp, error)
	mustEmbedUnimplementedTraderpcServer()
}

// UnimplementedTraderpcServer must be embedded to have forward compatible implementations.
type UnimplementedTraderpcServer struct {
}

func (UnimplementedTraderpcServer) AddProduct(context.Context, *AddProductReq) (*AddProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedTraderpcServer) UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedTraderpcServer) DelProduct(context.Context, *DelProductReq) (*DelProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProduct not implemented")
}
func (UnimplementedTraderpcServer) GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedTraderpcServer) SearchProduct(context.Context, *SearchProductByConditionReq) (*SearchProductByConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedTraderpcServer) SearchProductByResourcesBind(context.Context, *SearchProductByResourcesBindReq) (*SearchProductByResourcesBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProductByResourcesBind not implemented")
}
func (UnimplementedTraderpcServer) GetProductBindByProductId(context.Context, *GetProductBindByProductIdReq) (*GetProductBindByProductIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBindByProductId not implemented")
}
func (UnimplementedTraderpcServer) GetProductIdAndProductName(context.Context, *GetProductIdAndProductNameReq) (*GetProductIdAndProductNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductIdAndProductName not implemented")
}
func (UnimplementedTraderpcServer) GetProductByBindIdAndOwner(context.Context, *GetProductByBindIdAndOwnerReq) (*GetProductByBindIdAndOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByBindIdAndOwner not implemented")
}
func (UnimplementedTraderpcServer) mustEmbedUnimplementedTraderpcServer() {}

// UnsafeTraderpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraderpcServer will
// result in compilation errors.
type UnsafeTraderpcServer interface {
	mustEmbedUnimplementedTraderpcServer()
}

func RegisterTraderpcServer(s grpc.ServiceRegistrar, srv TraderpcServer) {
	s.RegisterService(&Traderpc_ServiceDesc, srv)
}

func _Traderpc_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).AddProduct(ctx, req.(*AddProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).UpdateProduct(ctx, req.(*UpdateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_DelProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).DelProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_DelProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).DelProduct(ctx, req.(*DelProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).GetProductById(ctx, req.(*GetProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductByConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).SearchProduct(ctx, req.(*SearchProductByConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_SearchProductByResourcesBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductByResourcesBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).SearchProductByResourcesBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_SearchProductByResourcesBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).SearchProductByResourcesBind(ctx, req.(*SearchProductByResourcesBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_GetProductBindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBindByProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).GetProductBindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_GetProductBindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).GetProductBindByProductId(ctx, req.(*GetProductBindByProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_GetProductIdAndProductName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductIdAndProductNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).GetProductIdAndProductName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_GetProductIdAndProductName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).GetProductIdAndProductName(ctx, req.(*GetProductIdAndProductNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traderpc_GetProductByBindIdAndOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByBindIdAndOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderpcServer).GetProductByBindIdAndOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traderpc_GetProductByBindIdAndOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderpcServer).GetProductByBindIdAndOwner(ctx, req.(*GetProductByBindIdAndOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Traderpc_ServiceDesc is the grpc.ServiceDesc for Traderpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Traderpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.traderpc",
	HandlerType: (*TraderpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _Traderpc_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Traderpc_UpdateProduct_Handler,
		},
		{
			MethodName: "DelProduct",
			Handler:    _Traderpc_DelProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _Traderpc_GetProductById_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _Traderpc_SearchProduct_Handler,
		},
		{
			MethodName: "SearchProductByResourcesBind",
			Handler:    _Traderpc_SearchProductByResourcesBind_Handler,
		},
		{
			MethodName: "GetProductBindByProductId",
			Handler:    _Traderpc_GetProductBindByProductId_Handler,
		},
		{
			MethodName: "GetProductIdAndProductName",
			Handler:    _Traderpc_GetProductIdAndProductName_Handler,
		},
		{
			MethodName: "GetProductByBindIdAndOwner",
			Handler:    _Traderpc_GetProductByBindIdAndOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traderpc.proto",
}
