// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/order/cmd/rpc/internal/model"
)

func newUserEarn(db *gorm.DB, opts ...gen.DOOption) userEarn {
	_userEarn := userEarn{}

	_userEarn.userEarnDo.UseDB(db, opts...)
	_userEarn.userEarnDo.UseModel(&model.UserEarn{})

	tableName := _userEarn.userEarnDo.TableName()
	_userEarn.ALL = field.NewAsterisk(tableName)
	_userEarn.ID = field.NewInt64(tableName, "id")
	_userEarn.UserID = field.NewInt64(tableName, "user_id")
	_userEarn.EarnNum = field.NewFloat64(tableName, "earn_num")
	_userEarn.PayNum = field.NewFloat64(tableName, "pay_num")
	_userEarn.CreateTime = field.NewTime(tableName, "create_time")
	_userEarn.UpdateTime = field.NewTime(tableName, "update_time")
	_userEarn.DeleteTime = field.NewField(tableName, "delete_time")

	_userEarn.fillFieldMap()

	return _userEarn
}

type userEarn struct {
	userEarnDo userEarnDo

	ALL        field.Asterisk
	ID         field.Int64   // 统计表id
	UserID     field.Int64   // 用户id
	EarnNum    field.Float64 // 用户入账
	PayNum     field.Float64 // 用户支出价格
	CreateTime field.Time    // 创建时间
	UpdateTime field.Time    // 更新时间
	DeleteTime field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (u userEarn) Table(newTableName string) *userEarn {
	u.userEarnDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEarn) As(alias string) *userEarn {
	u.userEarnDo.DO = *(u.userEarnDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEarn) updateTableName(table string) *userEarn {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.EarnNum = field.NewFloat64(table, "earn_num")
	u.PayNum = field.NewFloat64(table, "pay_num")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.DeleteTime = field.NewField(table, "delete_time")

	u.fillFieldMap()

	return u
}

func (u *userEarn) WithContext(ctx context.Context) IUserEarnDo { return u.userEarnDo.WithContext(ctx) }

func (u userEarn) TableName() string { return u.userEarnDo.TableName() }

func (u userEarn) Alias() string { return u.userEarnDo.Alias() }

func (u *userEarn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEarn) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["earn_num"] = u.EarnNum
	u.fieldMap["pay_num"] = u.PayNum
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["delete_time"] = u.DeleteTime
}

func (u userEarn) clone(db *gorm.DB) userEarn {
	u.userEarnDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEarn) replaceDB(db *gorm.DB) userEarn {
	u.userEarnDo.ReplaceDB(db)
	return u
}

type userEarnDo struct{ gen.DO }

type IUserEarnDo interface {
	gen.SubQuery
	Debug() IUserEarnDo
	WithContext(ctx context.Context) IUserEarnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEarnDo
	WriteDB() IUserEarnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEarnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEarnDo
	Not(conds ...gen.Condition) IUserEarnDo
	Or(conds ...gen.Condition) IUserEarnDo
	Select(conds ...field.Expr) IUserEarnDo
	Where(conds ...gen.Condition) IUserEarnDo
	Order(conds ...field.Expr) IUserEarnDo
	Distinct(cols ...field.Expr) IUserEarnDo
	Omit(cols ...field.Expr) IUserEarnDo
	Join(table schema.Tabler, on ...field.Expr) IUserEarnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEarnDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEarnDo
	Group(cols ...field.Expr) IUserEarnDo
	Having(conds ...gen.Condition) IUserEarnDo
	Limit(limit int) IUserEarnDo
	Offset(offset int) IUserEarnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEarnDo
	Unscoped() IUserEarnDo
	Create(values ...*model.UserEarn) error
	CreateInBatches(values []*model.UserEarn, batchSize int) error
	Save(values ...*model.UserEarn) error
	First() (*model.UserEarn, error)
	Take() (*model.UserEarn, error)
	Last() (*model.UserEarn, error)
	Find() ([]*model.UserEarn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEarn, err error)
	FindInBatches(result *[]*model.UserEarn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEarn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEarnDo
	Assign(attrs ...field.AssignExpr) IUserEarnDo
	Joins(fields ...field.RelationField) IUserEarnDo
	Preload(fields ...field.RelationField) IUserEarnDo
	FirstOrInit() (*model.UserEarn, error)
	FirstOrCreate() (*model.UserEarn, error)
	FindByPage(offset int, limit int) (result []*model.UserEarn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEarnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEarnDo) Debug() IUserEarnDo {
	return u.withDO(u.DO.Debug())
}

func (u userEarnDo) WithContext(ctx context.Context) IUserEarnDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEarnDo) ReadDB() IUserEarnDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEarnDo) WriteDB() IUserEarnDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEarnDo) Session(config *gorm.Session) IUserEarnDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEarnDo) Clauses(conds ...clause.Expression) IUserEarnDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEarnDo) Returning(value interface{}, columns ...string) IUserEarnDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEarnDo) Not(conds ...gen.Condition) IUserEarnDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEarnDo) Or(conds ...gen.Condition) IUserEarnDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEarnDo) Select(conds ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEarnDo) Where(conds ...gen.Condition) IUserEarnDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEarnDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserEarnDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userEarnDo) Order(conds ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEarnDo) Distinct(cols ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEarnDo) Omit(cols ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEarnDo) Join(table schema.Tabler, on ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEarnDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEarnDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEarnDo) Group(cols ...field.Expr) IUserEarnDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEarnDo) Having(conds ...gen.Condition) IUserEarnDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEarnDo) Limit(limit int) IUserEarnDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEarnDo) Offset(offset int) IUserEarnDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEarnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEarnDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEarnDo) Unscoped() IUserEarnDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEarnDo) Create(values ...*model.UserEarn) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEarnDo) CreateInBatches(values []*model.UserEarn, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEarnDo) Save(values ...*model.UserEarn) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEarnDo) First() (*model.UserEarn, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEarn), nil
	}
}

func (u userEarnDo) Take() (*model.UserEarn, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEarn), nil
	}
}

func (u userEarnDo) Last() (*model.UserEarn, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEarn), nil
	}
}

func (u userEarnDo) Find() ([]*model.UserEarn, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEarn), err
}

func (u userEarnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEarn, err error) {
	buf := make([]*model.UserEarn, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEarnDo) FindInBatches(result *[]*model.UserEarn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEarnDo) Attrs(attrs ...field.AssignExpr) IUserEarnDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEarnDo) Assign(attrs ...field.AssignExpr) IUserEarnDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEarnDo) Joins(fields ...field.RelationField) IUserEarnDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEarnDo) Preload(fields ...field.RelationField) IUserEarnDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEarnDo) FirstOrInit() (*model.UserEarn, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEarn), nil
	}
}

func (u userEarnDo) FirstOrCreate() (*model.UserEarn, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEarn), nil
	}
}

func (u userEarnDo) FindByPage(offset int, limit int) (result []*model.UserEarn, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEarnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEarnDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEarnDo) Delete(models ...*model.UserEarn) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEarnDo) withDO(do gen.Dao) *userEarnDo {
	u.DO = *do.(*gen.DO)
	return u
}
