// Code generated by goctl. DO NOT EDIT.
// Source: orderrpc.proto

package server

import (
	"context"

	"github.com/baiyz0825/school-share-buy-backend/apps/order/cmd/rpc/internal/logic"
	"github.com/baiyz0825/school-share-buy-backend/apps/order/cmd/rpc/internal/svc"
	"github.com/baiyz0825/school-share-buy-backend/apps/order/cmd/rpc/pb"
)

type OrderrpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedOrderrpcServer
}

func NewOrderrpcServer(svcCtx *svc.ServiceContext) *OrderrpcServer {
	return &OrderrpcServer{
		svcCtx: svcCtx,
	}
}

// -----------------------订单表-----------------------
func (s *OrderrpcServer) AddOrder(ctx context.Context, in *pb.AddOrderReq) (*pb.AddOrderResp, error) {
	l := logic.NewAddOrderLogic(ctx, s.svcCtx)
	return l.AddOrder(in)
}

func (s *OrderrpcServer) UpdateOrder(ctx context.Context, in *pb.UpdateOrderReq) (*pb.UpdateOrderResp, error) {
	l := logic.NewUpdateOrderLogic(ctx, s.svcCtx)
	return l.UpdateOrder(in)
}

func (s *OrderrpcServer) DelOrder(ctx context.Context, in *pb.DelOrderReq) (*pb.DelOrderResp, error) {
	l := logic.NewDelOrderLogic(ctx, s.svcCtx)
	return l.DelOrder(in)
}

func (s *OrderrpcServer) GetOrderById(ctx context.Context, in *pb.GetOrderByIdReq) (*pb.GetOrderByIdResp, error) {
	l := logic.NewGetOrderByIdLogic(ctx, s.svcCtx)
	return l.GetOrderById(in)
}

func (s *OrderrpcServer) SearchOrderByCondition(ctx context.Context, in *pb.SearchOrderByConditionReq) (*pb.SearchOrderByConditionResp, error) {
	l := logic.NewSearchOrderByConditionLogic(ctx, s.svcCtx)
	return l.SearchOrderByCondition(in)
}

func (s *OrderrpcServer) GetOrderInfoByUserIdAndProductId(ctx context.Context, in *pb.GetOrderInfoByUserIdAndProductIdReq) (*pb.GetOrderInfoByUserIdAndProductIdResp, error) {
	l := logic.NewGetOrderInfoByUserIdAndProductIdLogic(ctx, s.svcCtx)
	return l.GetOrderInfoByUserIdAndProductId(in)
}

func (s *OrderrpcServer) GetOrderInfoByUUIDAndUserId(ctx context.Context, in *pb.GetOrderInfoByUUIDAndUserIDReq) (*pb.GetOrderInfoByUUIDAndUserIDResp, error) {
	l := logic.NewGetOrderInfoByUUIDAndUserIdLogic(ctx, s.svcCtx)
	return l.GetOrderInfoByUUIDAndUserId(in)
}

func (s *OrderrpcServer) GetOrderUUIdByLimitAndStatus(ctx context.Context, in *pb.GetOrderUUIdByLimitAndStatusReq) (*pb.GetOrderUUIdByLimitAndStatusResp, error) {
	l := logic.NewGetOrderUUIdByLimitAndStatusLogic(ctx, s.svcCtx)
	return l.GetOrderUUIdByLimitAndStatus(in)
}

func (s *OrderrpcServer) GetOrderStatusByUUID(ctx context.Context, in *pb.GetOrderStatusByUUIDReq) (*pb.GetOrderStatusByUUIDResp, error) {
	l := logic.NewGetOrderStatusByUUIDLogic(ctx, s.svcCtx)
	return l.GetOrderStatusByUUID(in)
}

func (s *OrderrpcServer) CheckAilPayStatus(ctx context.Context, in *pb.CheckAilPayStatusReq) (*pb.CheckAilPayStatusResp, error) {
	l := logic.NewCheckAilPayStatusLogic(ctx, s.svcCtx)
	return l.CheckAilPayStatus(in)
}

func (s *OrderrpcServer) UpdateOrderStatus(ctx context.Context, in *pb.UpdateOrderStatusReq) (*pb.UpdateOrderStatusResp, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}

func (s *OrderrpcServer) GetProductBindAndPrices(ctx context.Context, in *pb.GetProductBindAndPricesReq) (*pb.GetProductBindAndPricesResp, error) {
	l := logic.NewGetProductBindAndPricesLogic(ctx, s.svcCtx)
	return l.GetProductBindAndPrices(in)
}

// -----------------------用户收入支出统计-----------------------
func (s *OrderrpcServer) AddUserEarn(ctx context.Context, in *pb.AddUserEarnReq) (*pb.AddUserEarnResp, error) {
	l := logic.NewAddUserEarnLogic(ctx, s.svcCtx)
	return l.AddUserEarn(in)
}

func (s *OrderrpcServer) DelUserEarn(ctx context.Context, in *pb.DelUserEarnReq) (*pb.DelUserEarnResp, error) {
	l := logic.NewDelUserEarnLogic(ctx, s.svcCtx)
	return l.DelUserEarn(in)
}

func (s *OrderrpcServer) GetUserEarnById(ctx context.Context, in *pb.GetUserEarnByIdReq) (*pb.GetUserEarnByIdResp, error) {
	l := logic.NewGetUserEarnByIdLogic(ctx, s.svcCtx)
	return l.GetUserEarnById(in)
}

func (s *OrderrpcServer) SearchUserEarnByCondition(ctx context.Context, in *pb.SearchUserEarnByConditionReq) (*pb.SearchUserEarnByConditionResp, error) {
	l := logic.NewSearchUserEarnByConditionLogic(ctx, s.svcCtx)
	return l.SearchUserEarnByCondition(in)
}

func (s *OrderrpcServer) UpsertUserEarn(ctx context.Context, in *pb.AddUserEarnReq) (*pb.AddUserEarnResp, error) {
	l := logic.NewUpsertUserEarnLogic(ctx, s.svcCtx)
	return l.UpsertUserEarn(in)
}

// ----- 下订单
func (s *OrderrpcServer) DoOrder(ctx context.Context, in *pb.DoOrderReq) (*pb.DoOrderResp, error) {
	l := logic.NewDoOrderLogic(ctx, s.svcCtx)
	return l.DoOrder(in)
}

func (s *OrderrpcServer) DeleteOrderAliAndDb(ctx context.Context, in *pb.DeleteOrderAliAndDbReq) (*pb.DeleteOrderAliAndDbResp, error) {
	l := logic.NewDeleteOrderAliAndDbLogic(ctx, s.svcCtx)
	return l.DeleteOrderAliAndDb(in)
}
