// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: orderrpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Orderrpc_AddOrder_FullMethodName                         = "/pb.orderrpc/AddOrder"
	Orderrpc_UpdateOrder_FullMethodName                      = "/pb.orderrpc/UpdateOrder"
	Orderrpc_DelOrder_FullMethodName                         = "/pb.orderrpc/DelOrder"
	Orderrpc_GetOrderById_FullMethodName                     = "/pb.orderrpc/GetOrderById"
	Orderrpc_SearchOrderByCondition_FullMethodName           = "/pb.orderrpc/SearchOrderByCondition"
	Orderrpc_GetOrderInfoByUserIdAndProductId_FullMethodName = "/pb.orderrpc/GetOrderInfoByUserIdAndProductId"
	Orderrpc_GetOrderInfoByUUIDAndUserId_FullMethodName      = "/pb.orderrpc/GetOrderInfoByUUIDAndUserId"
	Orderrpc_GetOrderUUIdByLimitAndStatus_FullMethodName     = "/pb.orderrpc/GetOrderUUIdByLimitAndStatus"
	Orderrpc_GetOrderStatusByUUID_FullMethodName             = "/pb.orderrpc/GetOrderStatusByUUID"
	Orderrpc_CheckAilPayStatus_FullMethodName                = "/pb.orderrpc/CheckAilPayStatus"
	Orderrpc_UpdateOrderStatus_FullMethodName                = "/pb.orderrpc/UpdateOrderStatus"
	Orderrpc_GetProductBindAndPrices_FullMethodName          = "/pb.orderrpc/GetProductBindAndPrices"
	Orderrpc_AddUserEarn_FullMethodName                      = "/pb.orderrpc/AddUserEarn"
	Orderrpc_DelUserEarn_FullMethodName                      = "/pb.orderrpc/DelUserEarn"
	Orderrpc_GetUserEarnById_FullMethodName                  = "/pb.orderrpc/GetUserEarnById"
	Orderrpc_SearchUserEarnByCondition_FullMethodName        = "/pb.orderrpc/SearchUserEarnByCondition"
	Orderrpc_UpsertUserEarn_FullMethodName                   = "/pb.orderrpc/UpsertUserEarn"
	Orderrpc_DoOrder_FullMethodName                          = "/pb.orderrpc/DoOrder"
	Orderrpc_DeleteOrderAliAndDb_FullMethodName              = "/pb.orderrpc/DeleteOrderAliAndDb"
)

// OrderrpcClient is the client API for Orderrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderrpcClient interface {
	// -----------------------订单表-----------------------
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
	SearchOrderByCondition(ctx context.Context, in *SearchOrderByConditionReq, opts ...grpc.CallOption) (*SearchOrderByConditionResp, error)
	GetOrderInfoByUserIdAndProductId(ctx context.Context, in *GetOrderInfoByUserIdAndProductIdReq, opts ...grpc.CallOption) (*GetOrderInfoByUserIdAndProductIdResp, error)
	GetOrderInfoByUUIDAndUserId(ctx context.Context, in *GetOrderInfoByUUIDAndUserIDReq, opts ...grpc.CallOption) (*GetOrderInfoByUUIDAndUserIDResp, error)
	GetOrderUUIdByLimitAndStatus(ctx context.Context, in *GetOrderUUIdByLimitAndStatusReq, opts ...grpc.CallOption) (*GetOrderUUIdByLimitAndStatusResp, error)
	GetOrderStatusByUUID(ctx context.Context, in *GetOrderStatusByUUIDReq, opts ...grpc.CallOption) (*GetOrderStatusByUUIDResp, error)
	CheckAilPayStatus(ctx context.Context, in *CheckAilPayStatusReq, opts ...grpc.CallOption) (*CheckAilPayStatusResp, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error)
	GetProductBindAndPrices(ctx context.Context, in *GetProductBindAndPricesReq, opts ...grpc.CallOption) (*GetProductBindAndPricesResp, error)
	// -----------------------用户收入支出统计-----------------------
	AddUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error)
	DelUserEarn(ctx context.Context, in *DelUserEarnReq, opts ...grpc.CallOption) (*DelUserEarnResp, error)
	GetUserEarnById(ctx context.Context, in *GetUserEarnByIdReq, opts ...grpc.CallOption) (*GetUserEarnByIdResp, error)
	SearchUserEarnByCondition(ctx context.Context, in *SearchUserEarnByConditionReq, opts ...grpc.CallOption) (*SearchUserEarnByConditionResp, error)
	UpsertUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error)
	// ----- 下订单
	DoOrder(ctx context.Context, in *DoOrderReq, opts ...grpc.CallOption) (*DoOrderResp, error)
	DeleteOrderAliAndDb(ctx context.Context, in *DeleteOrderAliAndDbReq, opts ...grpc.CallOption) (*DeleteOrderAliAndDbResp, error)
}

type orderrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderrpcClient(cc grpc.ClientConnInterface) OrderrpcClient {
	return &orderrpcClient{cc}
}

func (c *orderrpcClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, Orderrpc_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, Orderrpc_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	out := new(DelOrderResp)
	err := c.cc.Invoke(ctx, Orderrpc_DelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	out := new(GetOrderByIdResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetOrderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) SearchOrderByCondition(ctx context.Context, in *SearchOrderByConditionReq, opts ...grpc.CallOption) (*SearchOrderByConditionResp, error) {
	out := new(SearchOrderByConditionResp)
	err := c.cc.Invoke(ctx, Orderrpc_SearchOrderByCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetOrderInfoByUserIdAndProductId(ctx context.Context, in *GetOrderInfoByUserIdAndProductIdReq, opts ...grpc.CallOption) (*GetOrderInfoByUserIdAndProductIdResp, error) {
	out := new(GetOrderInfoByUserIdAndProductIdResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetOrderInfoByUserIdAndProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetOrderInfoByUUIDAndUserId(ctx context.Context, in *GetOrderInfoByUUIDAndUserIDReq, opts ...grpc.CallOption) (*GetOrderInfoByUUIDAndUserIDResp, error) {
	out := new(GetOrderInfoByUUIDAndUserIDResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetOrderInfoByUUIDAndUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetOrderUUIdByLimitAndStatus(ctx context.Context, in *GetOrderUUIdByLimitAndStatusReq, opts ...grpc.CallOption) (*GetOrderUUIdByLimitAndStatusResp, error) {
	out := new(GetOrderUUIdByLimitAndStatusResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetOrderUUIdByLimitAndStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetOrderStatusByUUID(ctx context.Context, in *GetOrderStatusByUUIDReq, opts ...grpc.CallOption) (*GetOrderStatusByUUIDResp, error) {
	out := new(GetOrderStatusByUUIDResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetOrderStatusByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) CheckAilPayStatus(ctx context.Context, in *CheckAilPayStatusReq, opts ...grpc.CallOption) (*CheckAilPayStatusResp, error) {
	out := new(CheckAilPayStatusResp)
	err := c.cc.Invoke(ctx, Orderrpc_CheckAilPayStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error) {
	out := new(UpdateOrderStatusResp)
	err := c.cc.Invoke(ctx, Orderrpc_UpdateOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetProductBindAndPrices(ctx context.Context, in *GetProductBindAndPricesReq, opts ...grpc.CallOption) (*GetProductBindAndPricesResp, error) {
	out := new(GetProductBindAndPricesResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetProductBindAndPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) AddUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error) {
	out := new(AddUserEarnResp)
	err := c.cc.Invoke(ctx, Orderrpc_AddUserEarn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) DelUserEarn(ctx context.Context, in *DelUserEarnReq, opts ...grpc.CallOption) (*DelUserEarnResp, error) {
	out := new(DelUserEarnResp)
	err := c.cc.Invoke(ctx, Orderrpc_DelUserEarn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) GetUserEarnById(ctx context.Context, in *GetUserEarnByIdReq, opts ...grpc.CallOption) (*GetUserEarnByIdResp, error) {
	out := new(GetUserEarnByIdResp)
	err := c.cc.Invoke(ctx, Orderrpc_GetUserEarnById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) SearchUserEarnByCondition(ctx context.Context, in *SearchUserEarnByConditionReq, opts ...grpc.CallOption) (*SearchUserEarnByConditionResp, error) {
	out := new(SearchUserEarnByConditionResp)
	err := c.cc.Invoke(ctx, Orderrpc_SearchUserEarnByCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) UpsertUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error) {
	out := new(AddUserEarnResp)
	err := c.cc.Invoke(ctx, Orderrpc_UpsertUserEarn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) DoOrder(ctx context.Context, in *DoOrderReq, opts ...grpc.CallOption) (*DoOrderResp, error) {
	out := new(DoOrderResp)
	err := c.cc.Invoke(ctx, Orderrpc_DoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderrpcClient) DeleteOrderAliAndDb(ctx context.Context, in *DeleteOrderAliAndDbReq, opts ...grpc.CallOption) (*DeleteOrderAliAndDbResp, error) {
	out := new(DeleteOrderAliAndDbResp)
	err := c.cc.Invoke(ctx, Orderrpc_DeleteOrderAliAndDb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderrpcServer is the server API for Orderrpc service.
// All implementations must embed UnimplementedOrderrpcServer
// for forward compatibility
type OrderrpcServer interface {
	// -----------------------订单表-----------------------
	AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error)
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error)
	GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error)
	SearchOrderByCondition(context.Context, *SearchOrderByConditionReq) (*SearchOrderByConditionResp, error)
	GetOrderInfoByUserIdAndProductId(context.Context, *GetOrderInfoByUserIdAndProductIdReq) (*GetOrderInfoByUserIdAndProductIdResp, error)
	GetOrderInfoByUUIDAndUserId(context.Context, *GetOrderInfoByUUIDAndUserIDReq) (*GetOrderInfoByUUIDAndUserIDResp, error)
	GetOrderUUIdByLimitAndStatus(context.Context, *GetOrderUUIdByLimitAndStatusReq) (*GetOrderUUIdByLimitAndStatusResp, error)
	GetOrderStatusByUUID(context.Context, *GetOrderStatusByUUIDReq) (*GetOrderStatusByUUIDResp, error)
	CheckAilPayStatus(context.Context, *CheckAilPayStatusReq) (*CheckAilPayStatusResp, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*UpdateOrderStatusResp, error)
	GetProductBindAndPrices(context.Context, *GetProductBindAndPricesReq) (*GetProductBindAndPricesResp, error)
	// -----------------------用户收入支出统计-----------------------
	AddUserEarn(context.Context, *AddUserEarnReq) (*AddUserEarnResp, error)
	DelUserEarn(context.Context, *DelUserEarnReq) (*DelUserEarnResp, error)
	GetUserEarnById(context.Context, *GetUserEarnByIdReq) (*GetUserEarnByIdResp, error)
	SearchUserEarnByCondition(context.Context, *SearchUserEarnByConditionReq) (*SearchUserEarnByConditionResp, error)
	UpsertUserEarn(context.Context, *AddUserEarnReq) (*AddUserEarnResp, error)
	// ----- 下订单
	DoOrder(context.Context, *DoOrderReq) (*DoOrderResp, error)
	DeleteOrderAliAndDb(context.Context, *DeleteOrderAliAndDbReq) (*DeleteOrderAliAndDbResp, error)
	mustEmbedUnimplementedOrderrpcServer()
}

// UnimplementedOrderrpcServer must be embedded to have forward compatible implementations.
type UnimplementedOrderrpcServer struct {
}

func (UnimplementedOrderrpcServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderrpcServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderrpcServer) DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrder not implemented")
}
func (UnimplementedOrderrpcServer) GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderrpcServer) SearchOrderByCondition(context.Context, *SearchOrderByConditionReq) (*SearchOrderByConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrderByCondition not implemented")
}
func (UnimplementedOrderrpcServer) GetOrderInfoByUserIdAndProductId(context.Context, *GetOrderInfoByUserIdAndProductIdReq) (*GetOrderInfoByUserIdAndProductIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfoByUserIdAndProductId not implemented")
}
func (UnimplementedOrderrpcServer) GetOrderInfoByUUIDAndUserId(context.Context, *GetOrderInfoByUUIDAndUserIDReq) (*GetOrderInfoByUUIDAndUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfoByUUIDAndUserId not implemented")
}
func (UnimplementedOrderrpcServer) GetOrderUUIdByLimitAndStatus(context.Context, *GetOrderUUIdByLimitAndStatusReq) (*GetOrderUUIdByLimitAndStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUUIdByLimitAndStatus not implemented")
}
func (UnimplementedOrderrpcServer) GetOrderStatusByUUID(context.Context, *GetOrderStatusByUUIDReq) (*GetOrderStatusByUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusByUUID not implemented")
}
func (UnimplementedOrderrpcServer) CheckAilPayStatus(context.Context, *CheckAilPayStatusReq) (*CheckAilPayStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAilPayStatus not implemented")
}
func (UnimplementedOrderrpcServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*UpdateOrderStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderrpcServer) GetProductBindAndPrices(context.Context, *GetProductBindAndPricesReq) (*GetProductBindAndPricesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBindAndPrices not implemented")
}
func (UnimplementedOrderrpcServer) AddUserEarn(context.Context, *AddUserEarnReq) (*AddUserEarnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserEarn not implemented")
}
func (UnimplementedOrderrpcServer) DelUserEarn(context.Context, *DelUserEarnReq) (*DelUserEarnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserEarn not implemented")
}
func (UnimplementedOrderrpcServer) GetUserEarnById(context.Context, *GetUserEarnByIdReq) (*GetUserEarnByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEarnById not implemented")
}
func (UnimplementedOrderrpcServer) SearchUserEarnByCondition(context.Context, *SearchUserEarnByConditionReq) (*SearchUserEarnByConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserEarnByCondition not implemented")
}
func (UnimplementedOrderrpcServer) UpsertUserEarn(context.Context, *AddUserEarnReq) (*AddUserEarnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserEarn not implemented")
}
func (UnimplementedOrderrpcServer) DoOrder(context.Context, *DoOrderReq) (*DoOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOrder not implemented")
}
func (UnimplementedOrderrpcServer) DeleteOrderAliAndDb(context.Context, *DeleteOrderAliAndDbReq) (*DeleteOrderAliAndDbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderAliAndDb not implemented")
}
func (UnimplementedOrderrpcServer) mustEmbedUnimplementedOrderrpcServer() {}

// UnsafeOrderrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderrpcServer will
// result in compilation errors.
type UnsafeOrderrpcServer interface {
	mustEmbedUnimplementedOrderrpcServer()
}

func RegisterOrderrpcServer(s grpc.ServiceRegistrar, srv OrderrpcServer) {
	s.RegisterService(&Orderrpc_ServiceDesc, srv)
}

func _Orderrpc_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_DelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).DelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_DelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).DelOrder(ctx, req.(*DelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetOrderById(ctx, req.(*GetOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_SearchOrderByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrderByConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).SearchOrderByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_SearchOrderByCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).SearchOrderByCondition(ctx, req.(*SearchOrderByConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetOrderInfoByUserIdAndProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoByUserIdAndProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetOrderInfoByUserIdAndProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetOrderInfoByUserIdAndProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetOrderInfoByUserIdAndProductId(ctx, req.(*GetOrderInfoByUserIdAndProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetOrderInfoByUUIDAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoByUUIDAndUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetOrderInfoByUUIDAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetOrderInfoByUUIDAndUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetOrderInfoByUUIDAndUserId(ctx, req.(*GetOrderInfoByUUIDAndUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetOrderUUIdByLimitAndStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUUIdByLimitAndStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetOrderUUIdByLimitAndStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetOrderUUIdByLimitAndStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetOrderUUIdByLimitAndStatus(ctx, req.(*GetOrderUUIdByLimitAndStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetOrderStatusByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderStatusByUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetOrderStatusByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetOrderStatusByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetOrderStatusByUUID(ctx, req.(*GetOrderStatusByUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_CheckAilPayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAilPayStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).CheckAilPayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_CheckAilPayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).CheckAilPayStatus(ctx, req.(*CheckAilPayStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetProductBindAndPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBindAndPricesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetProductBindAndPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetProductBindAndPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetProductBindAndPrices(ctx, req.(*GetProductBindAndPricesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_AddUserEarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserEarnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).AddUserEarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_AddUserEarn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).AddUserEarn(ctx, req.(*AddUserEarnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_DelUserEarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserEarnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).DelUserEarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_DelUserEarn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).DelUserEarn(ctx, req.(*DelUserEarnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_GetUserEarnById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEarnByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).GetUserEarnById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_GetUserEarnById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).GetUserEarnById(ctx, req.(*GetUserEarnByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_SearchUserEarnByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserEarnByConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).SearchUserEarnByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_SearchUserEarnByCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).SearchUserEarnByCondition(ctx, req.(*SearchUserEarnByConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_UpsertUserEarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserEarnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).UpsertUserEarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_UpsertUserEarn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).UpsertUserEarn(ctx, req.(*AddUserEarnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_DoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).DoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_DoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).DoOrder(ctx, req.(*DoOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderrpc_DeleteOrderAliAndDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderAliAndDbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderrpcServer).DeleteOrderAliAndDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orderrpc_DeleteOrderAliAndDb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderrpcServer).DeleteOrderAliAndDb(ctx, req.(*DeleteOrderAliAndDbReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Orderrpc_ServiceDesc is the grpc.ServiceDesc for Orderrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orderrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.orderrpc",
	HandlerType: (*OrderrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _Orderrpc_AddOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Orderrpc_UpdateOrder_Handler,
		},
		{
			MethodName: "DelOrder",
			Handler:    _Orderrpc_DelOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Orderrpc_GetOrderById_Handler,
		},
		{
			MethodName: "SearchOrderByCondition",
			Handler:    _Orderrpc_SearchOrderByCondition_Handler,
		},
		{
			MethodName: "GetOrderInfoByUserIdAndProductId",
			Handler:    _Orderrpc_GetOrderInfoByUserIdAndProductId_Handler,
		},
		{
			MethodName: "GetOrderInfoByUUIDAndUserId",
			Handler:    _Orderrpc_GetOrderInfoByUUIDAndUserId_Handler,
		},
		{
			MethodName: "GetOrderUUIdByLimitAndStatus",
			Handler:    _Orderrpc_GetOrderUUIdByLimitAndStatus_Handler,
		},
		{
			MethodName: "GetOrderStatusByUUID",
			Handler:    _Orderrpc_GetOrderStatusByUUID_Handler,
		},
		{
			MethodName: "CheckAilPayStatus",
			Handler:    _Orderrpc_CheckAilPayStatus_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _Orderrpc_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "GetProductBindAndPrices",
			Handler:    _Orderrpc_GetProductBindAndPrices_Handler,
		},
		{
			MethodName: "AddUserEarn",
			Handler:    _Orderrpc_AddUserEarn_Handler,
		},
		{
			MethodName: "DelUserEarn",
			Handler:    _Orderrpc_DelUserEarn_Handler,
		},
		{
			MethodName: "GetUserEarnById",
			Handler:    _Orderrpc_GetUserEarnById_Handler,
		},
		{
			MethodName: "SearchUserEarnByCondition",
			Handler:    _Orderrpc_SearchUserEarnByCondition_Handler,
		},
		{
			MethodName: "UpsertUserEarn",
			Handler:    _Orderrpc_UpsertUserEarn_Handler,
		},
		{
			MethodName: "DoOrder",
			Handler:    _Orderrpc_DoOrder_Handler,
		},
		{
			MethodName: "DeleteOrderAliAndDb",
			Handler:    _Orderrpc_DeleteOrderAliAndDb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderrpc.proto",
}
