// Code generated by goctl. DO NOT EDIT.
// Source: orderrpc.proto

package orderrpc

import (
	"context"

	"github.com/baiyz0825/school-share-buy-backend/apps/order/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOrderReq                          = pb.AddOrderReq
	AddOrderResp                         = pb.AddOrderResp
	AddUserEarnReq                       = pb.AddUserEarnReq
	AddUserEarnResp                      = pb.AddUserEarnResp
	CheckAilPayStatusReq                 = pb.CheckAilPayStatusReq
	CheckAilPayStatusResp                = pb.CheckAilPayStatusResp
	DelOrderReq                          = pb.DelOrderReq
	DelOrderResp                         = pb.DelOrderResp
	DelUserEarnReq                       = pb.DelUserEarnReq
	DelUserEarnResp                      = pb.DelUserEarnResp
	DeleteOrderAliAndDbReq               = pb.DeleteOrderAliAndDbReq
	DeleteOrderAliAndDbResp              = pb.DeleteOrderAliAndDbResp
	DoOrderReq                           = pb.DoOrderReq
	DoOrderResp                          = pb.DoOrderResp
	GetOrderByIdReq                      = pb.GetOrderByIdReq
	GetOrderByIdResp                     = pb.GetOrderByIdResp
	GetOrderInfoByUUIDAndUserIDReq       = pb.GetOrderInfoByUUIDAndUserIDReq
	GetOrderInfoByUUIDAndUserIDResp      = pb.GetOrderInfoByUUIDAndUserIDResp
	GetOrderInfoByUserIdAndProductIdReq  = pb.GetOrderInfoByUserIdAndProductIdReq
	GetOrderInfoByUserIdAndProductIdResp = pb.GetOrderInfoByUserIdAndProductIdResp
	GetOrderStatusByUUIDReq              = pb.GetOrderStatusByUUIDReq
	GetOrderStatusByUUIDResp             = pb.GetOrderStatusByUUIDResp
	GetOrderUUIdByLimitAndStatusReq      = pb.GetOrderUUIdByLimitAndStatusReq
	GetOrderUUIdByLimitAndStatusResp     = pb.GetOrderUUIdByLimitAndStatusResp
	GetProductBindAndPricesReq           = pb.GetProductBindAndPricesReq
	GetProductBindAndPricesResp          = pb.GetProductBindAndPricesResp
	GetUserEarnByIdReq                   = pb.GetUserEarnByIdReq
	GetUserEarnByIdResp                  = pb.GetUserEarnByIdResp
	Order                                = pb.Order
	ProductBindAndPrices                 = pb.ProductBindAndPrices
	SearchOrderByConditionReq            = pb.SearchOrderByConditionReq
	SearchOrderByConditionResp           = pb.SearchOrderByConditionResp
	SearchUserEarnByConditionReq         = pb.SearchUserEarnByConditionReq
	SearchUserEarnByConditionResp        = pb.SearchUserEarnByConditionResp
	UpdateOrderReq                       = pb.UpdateOrderReq
	UpdateOrderResp                      = pb.UpdateOrderResp
	UpdateOrderStatusReq                 = pb.UpdateOrderStatusReq
	UpdateOrderStatusResp                = pb.UpdateOrderStatusResp
	UserEarn                             = pb.UserEarn

	Orderrpc interface {
		// -----------------------订单表-----------------------
		AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
		UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
		DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
		GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
		SearchOrderByCondition(ctx context.Context, in *SearchOrderByConditionReq, opts ...grpc.CallOption) (*SearchOrderByConditionResp, error)
		GetOrderInfoByUserIdAndProductId(ctx context.Context, in *GetOrderInfoByUserIdAndProductIdReq, opts ...grpc.CallOption) (*GetOrderInfoByUserIdAndProductIdResp, error)
		GetOrderInfoByUUIDAndUserId(ctx context.Context, in *GetOrderInfoByUUIDAndUserIDReq, opts ...grpc.CallOption) (*GetOrderInfoByUUIDAndUserIDResp, error)
		GetOrderUUIdByLimitAndStatus(ctx context.Context, in *GetOrderUUIdByLimitAndStatusReq, opts ...grpc.CallOption) (*GetOrderUUIdByLimitAndStatusResp, error)
		GetOrderStatusByUUID(ctx context.Context, in *GetOrderStatusByUUIDReq, opts ...grpc.CallOption) (*GetOrderStatusByUUIDResp, error)
		CheckAilPayStatus(ctx context.Context, in *CheckAilPayStatusReq, opts ...grpc.CallOption) (*CheckAilPayStatusResp, error)
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error)
		GetProductBindAndPrices(ctx context.Context, in *GetProductBindAndPricesReq, opts ...grpc.CallOption) (*GetProductBindAndPricesResp, error)
		// -----------------------用户收入支出统计-----------------------
		AddUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error)
		DelUserEarn(ctx context.Context, in *DelUserEarnReq, opts ...grpc.CallOption) (*DelUserEarnResp, error)
		GetUserEarnById(ctx context.Context, in *GetUserEarnByIdReq, opts ...grpc.CallOption) (*GetUserEarnByIdResp, error)
		SearchUserEarnByCondition(ctx context.Context, in *SearchUserEarnByConditionReq, opts ...grpc.CallOption) (*SearchUserEarnByConditionResp, error)
		UpsertUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error)
		// ----- 下订单
		DoOrder(ctx context.Context, in *DoOrderReq, opts ...grpc.CallOption) (*DoOrderResp, error)
		DeleteOrderAliAndDb(ctx context.Context, in *DeleteOrderAliAndDbReq, opts ...grpc.CallOption) (*DeleteOrderAliAndDbResp, error)
	}

	defaultOrderrpc struct {
		cli zrpc.Client
	}
)

func NewOrderrpc(cli zrpc.Client) Orderrpc {
	return &defaultOrderrpc{
		cli: cli,
	}
}

// -----------------------订单表-----------------------
func (m *defaultOrderrpc) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

func (m *defaultOrderrpc) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrderrpc) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.DelOrder(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

func (m *defaultOrderrpc) SearchOrderByCondition(ctx context.Context, in *SearchOrderByConditionReq, opts ...grpc.CallOption) (*SearchOrderByConditionResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.SearchOrderByCondition(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetOrderInfoByUserIdAndProductId(ctx context.Context, in *GetOrderInfoByUserIdAndProductIdReq, opts ...grpc.CallOption) (*GetOrderInfoByUserIdAndProductIdResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetOrderInfoByUserIdAndProductId(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetOrderInfoByUUIDAndUserId(ctx context.Context, in *GetOrderInfoByUUIDAndUserIDReq, opts ...grpc.CallOption) (*GetOrderInfoByUUIDAndUserIDResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetOrderInfoByUUIDAndUserId(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetOrderUUIdByLimitAndStatus(ctx context.Context, in *GetOrderUUIdByLimitAndStatusReq, opts ...grpc.CallOption) (*GetOrderUUIdByLimitAndStatusResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetOrderUUIdByLimitAndStatus(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetOrderStatusByUUID(ctx context.Context, in *GetOrderStatusByUUIDReq, opts ...grpc.CallOption) (*GetOrderStatusByUUIDResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetOrderStatusByUUID(ctx, in, opts...)
}

func (m *defaultOrderrpc) CheckAilPayStatus(ctx context.Context, in *CheckAilPayStatusReq, opts ...grpc.CallOption) (*CheckAilPayStatusResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.CheckAilPayStatus(ctx, in, opts...)
}

func (m *defaultOrderrpc) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetProductBindAndPrices(ctx context.Context, in *GetProductBindAndPricesReq, opts ...grpc.CallOption) (*GetProductBindAndPricesResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetProductBindAndPrices(ctx, in, opts...)
}

// -----------------------用户收入支出统计-----------------------
func (m *defaultOrderrpc) AddUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.AddUserEarn(ctx, in, opts...)
}

func (m *defaultOrderrpc) DelUserEarn(ctx context.Context, in *DelUserEarnReq, opts ...grpc.CallOption) (*DelUserEarnResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.DelUserEarn(ctx, in, opts...)
}

func (m *defaultOrderrpc) GetUserEarnById(ctx context.Context, in *GetUserEarnByIdReq, opts ...grpc.CallOption) (*GetUserEarnByIdResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.GetUserEarnById(ctx, in, opts...)
}

func (m *defaultOrderrpc) SearchUserEarnByCondition(ctx context.Context, in *SearchUserEarnByConditionReq, opts ...grpc.CallOption) (*SearchUserEarnByConditionResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.SearchUserEarnByCondition(ctx, in, opts...)
}

func (m *defaultOrderrpc) UpsertUserEarn(ctx context.Context, in *AddUserEarnReq, opts ...grpc.CallOption) (*AddUserEarnResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.UpsertUserEarn(ctx, in, opts...)
}

// ----- 下订单
func (m *defaultOrderrpc) DoOrder(ctx context.Context, in *DoOrderReq, opts ...grpc.CallOption) (*DoOrderResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.DoOrder(ctx, in, opts...)
}

func (m *defaultOrderrpc) DeleteOrderAliAndDb(ctx context.Context, in *DeleteOrderAliAndDbReq, opts ...grpc.CallOption) (*DeleteOrderAliAndDbResp, error) {
	client := pb.NewOrderrpcClient(m.cli.Conn())
	return client.DeleteOrderAliAndDb(ctx, in, opts...)
}
