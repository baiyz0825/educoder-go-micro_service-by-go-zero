// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Classification *classification
	Count          *count
	File           *file
	OnlineText     *onlineText
	ResComment     *resComment
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Classification = &Q.Classification
	Count = &Q.Count
	File = &Q.File
	OnlineText = &Q.OnlineText
	ResComment = &Q.ResComment
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Classification: newClassification(db, opts...),
		Count:          newCount(db, opts...),
		File:           newFile(db, opts...),
		OnlineText:     newOnlineText(db, opts...),
		ResComment:     newResComment(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Classification classification
	Count          count
	File           file
	OnlineText     onlineText
	ResComment     resComment
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Classification: q.Classification.clone(db),
		Count:          q.Count.clone(db),
		File:           q.File.clone(db),
		OnlineText:     q.OnlineText.clone(db),
		ResComment:     q.ResComment.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Classification: q.Classification.replaceDB(db),
		Count:          q.Count.replaceDB(db),
		File:           q.File.replaceDB(db),
		OnlineText:     q.OnlineText.replaceDB(db),
		ResComment:     q.ResComment.replaceDB(db),
	}
}

type queryCtx struct {
	Classification IClassificationDo
	Count          ICountDo
	File           IFileDo
	OnlineText     IOnlineTextDo
	ResComment     IResCommentDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Classification: q.Classification.WithContext(ctx),
		Count:          q.Count.WithContext(ctx),
		File:           q.File.WithContext(ctx),
		OnlineText:     q.OnlineText.WithContext(ctx),
		ResComment:     q.ResComment.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
