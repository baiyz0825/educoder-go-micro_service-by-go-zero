// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/resources/cmd/rpc/internal/model"
)

func newOnlineText(db *gorm.DB, opts ...gen.DOOption) onlineText {
	_onlineText := onlineText{}

	_onlineText.onlineTextDo.UseDB(db, opts...)
	_onlineText.onlineTextDo.UseModel(&model.OnlineText{})

	tableName := _onlineText.onlineTextDo.TableName()
	_onlineText.ALL = field.NewAsterisk(tableName)
	_onlineText.ID = field.NewInt64(tableName, "id")
	_onlineText.UUID = field.NewInt64(tableName, "uuid")
	_onlineText.TextName = field.NewString(tableName, "text_name")
	_onlineText.TextPoster = field.NewString(tableName, "text_poster")
	_onlineText.TypeSuffix = field.NewInt64(tableName, "type_suffix")
	_onlineText.Owner = field.NewInt64(tableName, "owner")
	_onlineText.Content = field.NewBytes(tableName, "content")
	_onlineText.ClassID = field.NewInt64(tableName, "class_id")
	_onlineText.Permission = field.NewInt64(tableName, "permission")
	_onlineText.CreateTime = field.NewTime(tableName, "create_time")
	_onlineText.UpdateTime = field.NewTime(tableName, "update_time")
	_onlineText.DeleteTime = field.NewField(tableName, "delete_time")

	_onlineText.fillFieldMap()

	return _onlineText
}

type onlineText struct {
	onlineTextDo onlineTextDo

	ALL        field.Asterisk
	ID         field.Int64  // 在线文本自增id
	UUID       field.Int64  // 文本uuid
	TextName   field.String // 文档名称
	TextPoster field.String // 文本头图
	TypeSuffix field.Int64  // 文本输入格式（0 markdown）
	Owner      field.Int64  // 所属用户
	Content    field.Bytes  // 存储实际内容
	ClassID    field.Int64  // 所属资源分类id
	Permission field.Int64  // 是否允许查看 0 no 1 yes
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	DeleteTime field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (o onlineText) Table(newTableName string) *onlineText {
	o.onlineTextDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o onlineText) As(alias string) *onlineText {
	o.onlineTextDo.DO = *(o.onlineTextDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *onlineText) updateTableName(table string) *onlineText {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.UUID = field.NewInt64(table, "uuid")
	o.TextName = field.NewString(table, "text_name")
	o.TextPoster = field.NewString(table, "text_poster")
	o.TypeSuffix = field.NewInt64(table, "type_suffix")
	o.Owner = field.NewInt64(table, "owner")
	o.Content = field.NewBytes(table, "content")
	o.ClassID = field.NewInt64(table, "class_id")
	o.Permission = field.NewInt64(table, "permission")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.DeleteTime = field.NewField(table, "delete_time")

	o.fillFieldMap()

	return o
}

func (o *onlineText) WithContext(ctx context.Context) IOnlineTextDo {
	return o.onlineTextDo.WithContext(ctx)
}

func (o onlineText) TableName() string { return o.onlineTextDo.TableName() }

func (o onlineText) Alias() string { return o.onlineTextDo.Alias() }

func (o *onlineText) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *onlineText) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 12)
	o.fieldMap["id"] = o.ID
	o.fieldMap["uuid"] = o.UUID
	o.fieldMap["text_name"] = o.TextName
	o.fieldMap["text_poster"] = o.TextPoster
	o.fieldMap["type_suffix"] = o.TypeSuffix
	o.fieldMap["owner"] = o.Owner
	o.fieldMap["content"] = o.Content
	o.fieldMap["class_id"] = o.ClassID
	o.fieldMap["permission"] = o.Permission
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["delete_time"] = o.DeleteTime
}

func (o onlineText) clone(db *gorm.DB) onlineText {
	o.onlineTextDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o onlineText) replaceDB(db *gorm.DB) onlineText {
	o.onlineTextDo.ReplaceDB(db)
	return o
}

type onlineTextDo struct{ gen.DO }

type IOnlineTextDo interface {
	gen.SubQuery
	Debug() IOnlineTextDo
	WithContext(ctx context.Context) IOnlineTextDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOnlineTextDo
	WriteDB() IOnlineTextDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOnlineTextDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOnlineTextDo
	Not(conds ...gen.Condition) IOnlineTextDo
	Or(conds ...gen.Condition) IOnlineTextDo
	Select(conds ...field.Expr) IOnlineTextDo
	Where(conds ...gen.Condition) IOnlineTextDo
	Order(conds ...field.Expr) IOnlineTextDo
	Distinct(cols ...field.Expr) IOnlineTextDo
	Omit(cols ...field.Expr) IOnlineTextDo
	Join(table schema.Tabler, on ...field.Expr) IOnlineTextDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOnlineTextDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOnlineTextDo
	Group(cols ...field.Expr) IOnlineTextDo
	Having(conds ...gen.Condition) IOnlineTextDo
	Limit(limit int) IOnlineTextDo
	Offset(offset int) IOnlineTextDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOnlineTextDo
	Unscoped() IOnlineTextDo
	Create(values ...*model.OnlineText) error
	CreateInBatches(values []*model.OnlineText, batchSize int) error
	Save(values ...*model.OnlineText) error
	First() (*model.OnlineText, error)
	Take() (*model.OnlineText, error)
	Last() (*model.OnlineText, error)
	Find() ([]*model.OnlineText, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OnlineText, err error)
	FindInBatches(result *[]*model.OnlineText, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OnlineText) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOnlineTextDo
	Assign(attrs ...field.AssignExpr) IOnlineTextDo
	Joins(fields ...field.RelationField) IOnlineTextDo
	Preload(fields ...field.RelationField) IOnlineTextDo
	FirstOrInit() (*model.OnlineText, error)
	FirstOrCreate() (*model.OnlineText, error)
	FindByPage(offset int, limit int) (result []*model.OnlineText, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOnlineTextDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o onlineTextDo) Debug() IOnlineTextDo {
	return o.withDO(o.DO.Debug())
}

func (o onlineTextDo) WithContext(ctx context.Context) IOnlineTextDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o onlineTextDo) ReadDB() IOnlineTextDo {
	return o.Clauses(dbresolver.Read)
}

func (o onlineTextDo) WriteDB() IOnlineTextDo {
	return o.Clauses(dbresolver.Write)
}

func (o onlineTextDo) Session(config *gorm.Session) IOnlineTextDo {
	return o.withDO(o.DO.Session(config))
}

func (o onlineTextDo) Clauses(conds ...clause.Expression) IOnlineTextDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o onlineTextDo) Returning(value interface{}, columns ...string) IOnlineTextDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o onlineTextDo) Not(conds ...gen.Condition) IOnlineTextDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o onlineTextDo) Or(conds ...gen.Condition) IOnlineTextDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o onlineTextDo) Select(conds ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o onlineTextDo) Where(conds ...gen.Condition) IOnlineTextDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o onlineTextDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOnlineTextDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o onlineTextDo) Order(conds ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o onlineTextDo) Distinct(cols ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o onlineTextDo) Omit(cols ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o onlineTextDo) Join(table schema.Tabler, on ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o onlineTextDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o onlineTextDo) RightJoin(table schema.Tabler, on ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o onlineTextDo) Group(cols ...field.Expr) IOnlineTextDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o onlineTextDo) Having(conds ...gen.Condition) IOnlineTextDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o onlineTextDo) Limit(limit int) IOnlineTextDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o onlineTextDo) Offset(offset int) IOnlineTextDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o onlineTextDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOnlineTextDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o onlineTextDo) Unscoped() IOnlineTextDo {
	return o.withDO(o.DO.Unscoped())
}

func (o onlineTextDo) Create(values ...*model.OnlineText) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o onlineTextDo) CreateInBatches(values []*model.OnlineText, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o onlineTextDo) Save(values ...*model.OnlineText) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o onlineTextDo) First() (*model.OnlineText, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlineText), nil
	}
}

func (o onlineTextDo) Take() (*model.OnlineText, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlineText), nil
	}
}

func (o onlineTextDo) Last() (*model.OnlineText, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlineText), nil
	}
}

func (o onlineTextDo) Find() ([]*model.OnlineText, error) {
	result, err := o.DO.Find()
	return result.([]*model.OnlineText), err
}

func (o onlineTextDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OnlineText, err error) {
	buf := make([]*model.OnlineText, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o onlineTextDo) FindInBatches(result *[]*model.OnlineText, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o onlineTextDo) Attrs(attrs ...field.AssignExpr) IOnlineTextDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o onlineTextDo) Assign(attrs ...field.AssignExpr) IOnlineTextDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o onlineTextDo) Joins(fields ...field.RelationField) IOnlineTextDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o onlineTextDo) Preload(fields ...field.RelationField) IOnlineTextDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o onlineTextDo) FirstOrInit() (*model.OnlineText, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlineText), nil
	}
}

func (o onlineTextDo) FirstOrCreate() (*model.OnlineText, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlineText), nil
	}
}

func (o onlineTextDo) FindByPage(offset int, limit int) (result []*model.OnlineText, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o onlineTextDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o onlineTextDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o onlineTextDo) Delete(models ...*model.OnlineText) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *onlineTextDo) withDO(do gen.Dao) *onlineTextDo {
	o.DO = *do.(*gen.DO)
	return o
}
