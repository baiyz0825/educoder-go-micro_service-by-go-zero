// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/resources/cmd/rpc/internal/model"
)

func newClassification(db *gorm.DB, opts ...gen.DOOption) classification {
	_classification := classification{}

	_classification.classificationDo.UseDB(db, opts...)
	_classification.classificationDo.UseModel(&model.Classification{})

	tableName := _classification.classificationDo.TableName()
	_classification.ALL = field.NewAsterisk(tableName)
	_classification.ClassID = field.NewInt64(tableName, "class_id")
	_classification.ClassParentID = field.NewInt64(tableName, "class_parent_id")
	_classification.ClassName = field.NewString(tableName, "class_name")
	_classification.ClassResourceNum = field.NewInt64(tableName, "class_resource_num")
	_classification.CreateTime = field.NewTime(tableName, "create_time")
	_classification.UpdateTime = field.NewTime(tableName, "update_time")
	_classification.DeleteTime = field.NewField(tableName, "delete_time")

	_classification.fillFieldMap()

	return _classification
}

type classification struct {
	classificationDo classificationDo

	ALL              field.Asterisk
	ClassID          field.Int64  // 资源id
	ClassParentID    field.Int64  // 父分类ID
	ClassName        field.String // 分类名称
	ClassResourceNum field.Int64  // 分类下资源数量
	CreateTime       field.Time   // 创建时间
	UpdateTime       field.Time   // 更新时间
	DeleteTime       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c classification) Table(newTableName string) *classification {
	c.classificationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c classification) As(alias string) *classification {
	c.classificationDo.DO = *(c.classificationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *classification) updateTableName(table string) *classification {
	c.ALL = field.NewAsterisk(table)
	c.ClassID = field.NewInt64(table, "class_id")
	c.ClassParentID = field.NewInt64(table, "class_parent_id")
	c.ClassName = field.NewString(table, "class_name")
	c.ClassResourceNum = field.NewInt64(table, "class_resource_num")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.DeleteTime = field.NewField(table, "delete_time")

	c.fillFieldMap()

	return c
}

func (c *classification) WithContext(ctx context.Context) IClassificationDo {
	return c.classificationDo.WithContext(ctx)
}

func (c classification) TableName() string { return c.classificationDo.TableName() }

func (c classification) Alias() string { return c.classificationDo.Alias() }

func (c *classification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *classification) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["class_id"] = c.ClassID
	c.fieldMap["class_parent_id"] = c.ClassParentID
	c.fieldMap["class_name"] = c.ClassName
	c.fieldMap["class_resource_num"] = c.ClassResourceNum
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["delete_time"] = c.DeleteTime
}

func (c classification) clone(db *gorm.DB) classification {
	c.classificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c classification) replaceDB(db *gorm.DB) classification {
	c.classificationDo.ReplaceDB(db)
	return c
}

type classificationDo struct{ gen.DO }

type IClassificationDo interface {
	gen.SubQuery
	Debug() IClassificationDo
	WithContext(ctx context.Context) IClassificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClassificationDo
	WriteDB() IClassificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClassificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClassificationDo
	Not(conds ...gen.Condition) IClassificationDo
	Or(conds ...gen.Condition) IClassificationDo
	Select(conds ...field.Expr) IClassificationDo
	Where(conds ...gen.Condition) IClassificationDo
	Order(conds ...field.Expr) IClassificationDo
	Distinct(cols ...field.Expr) IClassificationDo
	Omit(cols ...field.Expr) IClassificationDo
	Join(table schema.Tabler, on ...field.Expr) IClassificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClassificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClassificationDo
	Group(cols ...field.Expr) IClassificationDo
	Having(conds ...gen.Condition) IClassificationDo
	Limit(limit int) IClassificationDo
	Offset(offset int) IClassificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClassificationDo
	Unscoped() IClassificationDo
	Create(values ...*model.Classification) error
	CreateInBatches(values []*model.Classification, batchSize int) error
	Save(values ...*model.Classification) error
	First() (*model.Classification, error)
	Take() (*model.Classification, error)
	Last() (*model.Classification, error)
	Find() ([]*model.Classification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Classification, err error)
	FindInBatches(result *[]*model.Classification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Classification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClassificationDo
	Assign(attrs ...field.AssignExpr) IClassificationDo
	Joins(fields ...field.RelationField) IClassificationDo
	Preload(fields ...field.RelationField) IClassificationDo
	FirstOrInit() (*model.Classification, error)
	FirstOrCreate() (*model.Classification, error)
	FindByPage(offset int, limit int) (result []*model.Classification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClassificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c classificationDo) Debug() IClassificationDo {
	return c.withDO(c.DO.Debug())
}

func (c classificationDo) WithContext(ctx context.Context) IClassificationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c classificationDo) ReadDB() IClassificationDo {
	return c.Clauses(dbresolver.Read)
}

func (c classificationDo) WriteDB() IClassificationDo {
	return c.Clauses(dbresolver.Write)
}

func (c classificationDo) Session(config *gorm.Session) IClassificationDo {
	return c.withDO(c.DO.Session(config))
}

func (c classificationDo) Clauses(conds ...clause.Expression) IClassificationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c classificationDo) Returning(value interface{}, columns ...string) IClassificationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c classificationDo) Not(conds ...gen.Condition) IClassificationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c classificationDo) Or(conds ...gen.Condition) IClassificationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c classificationDo) Select(conds ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c classificationDo) Where(conds ...gen.Condition) IClassificationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c classificationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IClassificationDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c classificationDo) Order(conds ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c classificationDo) Distinct(cols ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c classificationDo) Omit(cols ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c classificationDo) Join(table schema.Tabler, on ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c classificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c classificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c classificationDo) Group(cols ...field.Expr) IClassificationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c classificationDo) Having(conds ...gen.Condition) IClassificationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c classificationDo) Limit(limit int) IClassificationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c classificationDo) Offset(offset int) IClassificationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c classificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClassificationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c classificationDo) Unscoped() IClassificationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c classificationDo) Create(values ...*model.Classification) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c classificationDo) CreateInBatches(values []*model.Classification, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c classificationDo) Save(values ...*model.Classification) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c classificationDo) First() (*model.Classification, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classification), nil
	}
}

func (c classificationDo) Take() (*model.Classification, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classification), nil
	}
}

func (c classificationDo) Last() (*model.Classification, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classification), nil
	}
}

func (c classificationDo) Find() ([]*model.Classification, error) {
	result, err := c.DO.Find()
	return result.([]*model.Classification), err
}

func (c classificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Classification, err error) {
	buf := make([]*model.Classification, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c classificationDo) FindInBatches(result *[]*model.Classification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c classificationDo) Attrs(attrs ...field.AssignExpr) IClassificationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c classificationDo) Assign(attrs ...field.AssignExpr) IClassificationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c classificationDo) Joins(fields ...field.RelationField) IClassificationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c classificationDo) Preload(fields ...field.RelationField) IClassificationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c classificationDo) FirstOrInit() (*model.Classification, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classification), nil
	}
}

func (c classificationDo) FirstOrCreate() (*model.Classification, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Classification), nil
	}
}

func (c classificationDo) FindByPage(offset int, limit int) (result []*model.Classification, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c classificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c classificationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c classificationDo) Delete(models ...*model.Classification) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *classificationDo) withDO(do gen.Dao) *classificationDo {
	c.DO = *do.(*gen.DO)
	return c
}
