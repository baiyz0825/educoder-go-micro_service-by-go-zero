// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/resources/cmd/rpc/internal/model"
)

func newResComment(db *gorm.DB, opts ...gen.DOOption) resComment {
	_resComment := resComment{}

	_resComment.resCommentDo.UseDB(db, opts...)
	_resComment.resCommentDo.UseModel(&model.ResComment{})

	tableName := _resComment.resCommentDo.TableName()
	_resComment.ALL = field.NewAsterisk(tableName)
	_resComment.ID = field.NewInt64(tableName, "id")
	_resComment.Owner = field.NewInt64(tableName, "owner")
	_resComment.ResourceID = field.NewInt64(tableName, "resource_id")
	_resComment.Content = field.NewString(tableName, "content")
	_resComment.CreateTime = field.NewTime(tableName, "create_time")
	_resComment.UpdateTime = field.NewTime(tableName, "update_time")
	_resComment.DeleteTime = field.NewField(tableName, "delete_time")

	_resComment.fillFieldMap()

	return _resComment
}

type resComment struct {
	resCommentDo resCommentDo

	ALL        field.Asterisk
	ID         field.Int64  // 评论自增id
	Owner      field.Int64  // 评论所属人信息
	ResourceID field.Int64  // 资源id
	Content    field.String // 评论内容
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	DeleteTime field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (r resComment) Table(newTableName string) *resComment {
	r.resCommentDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resComment) As(alias string) *resComment {
	r.resCommentDo.DO = *(r.resCommentDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resComment) updateTableName(table string) *resComment {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Owner = field.NewInt64(table, "owner")
	r.ResourceID = field.NewInt64(table, "resource_id")
	r.Content = field.NewString(table, "content")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.DeleteTime = field.NewField(table, "delete_time")

	r.fillFieldMap()

	return r
}

func (r *resComment) WithContext(ctx context.Context) IResCommentDo {
	return r.resCommentDo.WithContext(ctx)
}

func (r resComment) TableName() string { return r.resCommentDo.TableName() }

func (r resComment) Alias() string { return r.resCommentDo.Alias() }

func (r *resComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resComment) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["owner"] = r.Owner
	r.fieldMap["resource_id"] = r.ResourceID
	r.fieldMap["content"] = r.Content
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["delete_time"] = r.DeleteTime
}

func (r resComment) clone(db *gorm.DB) resComment {
	r.resCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resComment) replaceDB(db *gorm.DB) resComment {
	r.resCommentDo.ReplaceDB(db)
	return r
}

type resCommentDo struct{ gen.DO }

type IResCommentDo interface {
	gen.SubQuery
	Debug() IResCommentDo
	WithContext(ctx context.Context) IResCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResCommentDo
	WriteDB() IResCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResCommentDo
	Not(conds ...gen.Condition) IResCommentDo
	Or(conds ...gen.Condition) IResCommentDo
	Select(conds ...field.Expr) IResCommentDo
	Where(conds ...gen.Condition) IResCommentDo
	Order(conds ...field.Expr) IResCommentDo
	Distinct(cols ...field.Expr) IResCommentDo
	Omit(cols ...field.Expr) IResCommentDo
	Join(table schema.Tabler, on ...field.Expr) IResCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResCommentDo
	Group(cols ...field.Expr) IResCommentDo
	Having(conds ...gen.Condition) IResCommentDo
	Limit(limit int) IResCommentDo
	Offset(offset int) IResCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResCommentDo
	Unscoped() IResCommentDo
	Create(values ...*model.ResComment) error
	CreateInBatches(values []*model.ResComment, batchSize int) error
	Save(values ...*model.ResComment) error
	First() (*model.ResComment, error)
	Take() (*model.ResComment, error)
	Last() (*model.ResComment, error)
	Find() ([]*model.ResComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResComment, err error)
	FindInBatches(result *[]*model.ResComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ResComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResCommentDo
	Assign(attrs ...field.AssignExpr) IResCommentDo
	Joins(fields ...field.RelationField) IResCommentDo
	Preload(fields ...field.RelationField) IResCommentDo
	FirstOrInit() (*model.ResComment, error)
	FirstOrCreate() (*model.ResComment, error)
	FindByPage(offset int, limit int) (result []*model.ResComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resCommentDo) Debug() IResCommentDo {
	return r.withDO(r.DO.Debug())
}

func (r resCommentDo) WithContext(ctx context.Context) IResCommentDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resCommentDo) ReadDB() IResCommentDo {
	return r.Clauses(dbresolver.Read)
}

func (r resCommentDo) WriteDB() IResCommentDo {
	return r.Clauses(dbresolver.Write)
}

func (r resCommentDo) Session(config *gorm.Session) IResCommentDo {
	return r.withDO(r.DO.Session(config))
}

func (r resCommentDo) Clauses(conds ...clause.Expression) IResCommentDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resCommentDo) Returning(value interface{}, columns ...string) IResCommentDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resCommentDo) Not(conds ...gen.Condition) IResCommentDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resCommentDo) Or(conds ...gen.Condition) IResCommentDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resCommentDo) Select(conds ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resCommentDo) Where(conds ...gen.Condition) IResCommentDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IResCommentDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resCommentDo) Order(conds ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resCommentDo) Distinct(cols ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resCommentDo) Omit(cols ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resCommentDo) Join(table schema.Tabler, on ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resCommentDo) Group(cols ...field.Expr) IResCommentDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resCommentDo) Having(conds ...gen.Condition) IResCommentDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resCommentDo) Limit(limit int) IResCommentDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resCommentDo) Offset(offset int) IResCommentDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResCommentDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resCommentDo) Unscoped() IResCommentDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resCommentDo) Create(values ...*model.ResComment) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resCommentDo) CreateInBatches(values []*model.ResComment, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resCommentDo) Save(values ...*model.ResComment) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resCommentDo) First() (*model.ResComment, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResComment), nil
	}
}

func (r resCommentDo) Take() (*model.ResComment, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResComment), nil
	}
}

func (r resCommentDo) Last() (*model.ResComment, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResComment), nil
	}
}

func (r resCommentDo) Find() ([]*model.ResComment, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResComment), err
}

func (r resCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResComment, err error) {
	buf := make([]*model.ResComment, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resCommentDo) FindInBatches(result *[]*model.ResComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resCommentDo) Attrs(attrs ...field.AssignExpr) IResCommentDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resCommentDo) Assign(attrs ...field.AssignExpr) IResCommentDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resCommentDo) Joins(fields ...field.RelationField) IResCommentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resCommentDo) Preload(fields ...field.RelationField) IResCommentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resCommentDo) FirstOrInit() (*model.ResComment, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResComment), nil
	}
}

func (r resCommentDo) FirstOrCreate() (*model.ResComment, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResComment), nil
	}
}

func (r resCommentDo) FindByPage(offset int, limit int) (result []*model.ResComment, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resCommentDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resCommentDo) Delete(models ...*model.ResComment) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resCommentDo) withDO(do gen.Dao) *resCommentDo {
	r.DO = *do.(*gen.DO)
	return r
}
