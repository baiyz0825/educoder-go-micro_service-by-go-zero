// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: resourcesrpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Resourcesrpc_AddClassification_FullMethodName             = "/pb.resourcesrpc/AddClassification"
	Resourcesrpc_UpdateClassification_FullMethodName          = "/pb.resourcesrpc/UpdateClassification"
	Resourcesrpc_DelClassification_FullMethodName             = "/pb.resourcesrpc/DelClassification"
	Resourcesrpc_GetClassificationById_FullMethodName         = "/pb.resourcesrpc/GetClassificationById"
	Resourcesrpc_SearchClassificationAll_FullMethodName       = "/pb.resourcesrpc/SearchClassificationAll"
	Resourcesrpc_GetClassificationDataByPages_FullMethodName  = "/pb.resourcesrpc/GetClassificationDataByPages"
	Resourcesrpc_AddCount_FullMethodName                      = "/pb.resourcesrpc/AddCount"
	Resourcesrpc_UpdateCount_FullMethodName                   = "/pb.resourcesrpc/UpdateCount"
	Resourcesrpc_DelCount_FullMethodName                      = "/pb.resourcesrpc/DelCount"
	Resourcesrpc_GetCountById_FullMethodName                  = "/pb.resourcesrpc/GetCountById"
	Resourcesrpc_GetCountByUId_FullMethodName                 = "/pb.resourcesrpc/GetCountByUId"
	Resourcesrpc_AddFile_FullMethodName                       = "/pb.resourcesrpc/AddFile"
	Resourcesrpc_UpdateFile_FullMethodName                    = "/pb.resourcesrpc/UpdateFile"
	Resourcesrpc_DelFile_FullMethodName                       = "/pb.resourcesrpc/DelFile"
	Resourcesrpc_GetFileById_FullMethodName                   = "/pb.resourcesrpc/GetFileById"
	Resourcesrpc_SearchFileConditionPages_FullMethodName      = "/pb.resourcesrpc/SearchFileConditionPages"
	Resourcesrpc_CheckDownloadAllow_FullMethodName            = "/pb.resourcesrpc/CheckDownloadAllow"
	Resourcesrpc_GetFilResourcesUSerId_FullMethodName         = "/pb.resourcesrpc/GetFilResourcesUSerId"
	Resourcesrpc_AddOnlineText_FullMethodName                 = "/pb.resourcesrpc/AddOnlineText"
	Resourcesrpc_UpdateOnlineText_FullMethodName              = "/pb.resourcesrpc/UpdateOnlineText"
	Resourcesrpc_DelOnlineText_FullMethodName                 = "/pb.resourcesrpc/DelOnlineText"
	Resourcesrpc_GetOnlineTextById_FullMethodName             = "/pb.resourcesrpc/GetOnlineTextById"
	Resourcesrpc_SearchOnlineConditionText_FullMethodName     = "/pb.resourcesrpc/SearchOnlineConditionText"
	Resourcesrpc_AddResComment_FullMethodName                 = "/pb.resourcesrpc/AddResComment"
	Resourcesrpc_UpdateResComment_FullMethodName              = "/pb.resourcesrpc/UpdateResComment"
	Resourcesrpc_DelResComment_FullMethodName                 = "/pb.resourcesrpc/DelResComment"
	Resourcesrpc_GetResCommentById_FullMethodName             = "/pb.resourcesrpc/GetResCommentById"
	Resourcesrpc_SearchResCommentByUserOrResId_FullMethodName = "/pb.resourcesrpc/SearchResCommentByUserOrResId"
)

// ResourcesrpcClient is the client API for Resourcesrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesrpcClient interface {
	//-----------------------资源分类信息-----------------------
	AddClassification(ctx context.Context, in *AddClassificationReq, opts ...grpc.CallOption) (*AddClassificationResp, error)
	UpdateClassification(ctx context.Context, in *UpdateClassificationReq, opts ...grpc.CallOption) (*UpdateClassificationResp, error)
	DelClassification(ctx context.Context, in *DelClassificationReq, opts ...grpc.CallOption) (*DelClassificationResp, error)
	GetClassificationById(ctx context.Context, in *GetClassificationByIdReq, opts ...grpc.CallOption) (*GetClassificationByIdResp, error)
	// 查询全部分类
	SearchClassificationAll(ctx context.Context, in *SearchClassificationAllReq, opts ...grpc.CallOption) (*SearchClassificationAllResp, error)
	// 分类查询分类id下的资源
	GetClassificationDataByPages(ctx context.Context, in *ClassificationDataByPagesReq, opts ...grpc.CallOption) (*ClassificationDataByPagesResp, error)
	//-----------------------用户上传资源量统计信息-----------------------
	AddCount(ctx context.Context, in *AddCountReq, opts ...grpc.CallOption) (*AddCountResp, error)
	UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*UpdateCountResp, error)
	DelCount(ctx context.Context, in *DelCountReq, opts ...grpc.CallOption) (*DelCountResp, error)
	GetCountById(ctx context.Context, in *GetCountByIdReq, opts ...grpc.CallOption) (*GetCountByIdResp, error)
	GetCountByUId(ctx context.Context, in *GetCountByUIdReq, opts ...grpc.CallOption) (*GetCountByUIdResp, error)
	//-----------------------文件资源存储表（非文本类型）-----------------------
	AddFile(ctx context.Context, in *AddFileReq, opts ...grpc.CallOption) (*AddFileResp, error)
	UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileResp, error)
	DelFile(ctx context.Context, in *DelFileReq, opts ...grpc.CallOption) (*DelFileResp, error)
	GetFileById(ctx context.Context, in *GetFileByIdReq, opts ...grpc.CallOption) (*GetFileByIdResp, error)
	// 多条件查询（大类，用户id / 全部文件中筛选）
	SearchFileConditionPages(ctx context.Context, in *SearchFileConditionReq, opts ...grpc.CallOption) (*SearchFileConditionResp, error)
	// 检查文件是否允许下载
	CheckDownloadAllow(ctx context.Context, in *CheckDownloadAllowReq, opts ...grpc.CallOption) (*CheckDownloadAllowResp, error)
	GetFilResourcesUSerId(ctx context.Context, in *GetFilResourcesUSerIdReq, opts ...grpc.CallOption) (*GetFilResourcesUSerIdResp, error)
	//-----------------------在线文本资源信息-----------------------
	AddOnlineText(ctx context.Context, in *AddOnlineTextReq, opts ...grpc.CallOption) (*AddOnlineTextResp, error)
	UpdateOnlineText(ctx context.Context, in *UpdateOnlineTextReq, opts ...grpc.CallOption) (*UpdateOnlineTextResp, error)
	DelOnlineText(ctx context.Context, in *DelOnlineTextReq, opts ...grpc.CallOption) (*DelOnlineTextResp, error)
	GetOnlineTextById(ctx context.Context, in *GetOnlineTextByIdReq, opts ...grpc.CallOption) (*GetOnlineTextByIdResp, error)
	// 多条件查询（大类，用户id / 全部文件中筛选）
	SearchOnlineConditionText(ctx context.Context, in *SearchOnlineConditionTextReq, opts ...grpc.CallOption) (*SearchOnlineTextConditionResp, error)
	//-----------------------资源评论信息-----------------------
	AddResComment(ctx context.Context, in *AddResCommentReq, opts ...grpc.CallOption) (*AddResCommentResp, error)
	UpdateResComment(ctx context.Context, in *UpdateResCommentReq, opts ...grpc.CallOption) (*UpdateResCommentResp, error)
	DelResComment(ctx context.Context, in *DelResCommentReq, opts ...grpc.CallOption) (*DelResCommentResp, error)
	GetResCommentById(ctx context.Context, in *GetResCommentByIdReq, opts ...grpc.CallOption) (*GetResCommentByIdResp, error)
	// 查询某一个资源下评论 ， 查询用户全部评论
	SearchResCommentByUserOrResId(ctx context.Context, in *SearchResCommentByUserOrResIdReq, opts ...grpc.CallOption) (*SearchResCommentByUserOrResIdResp, error)
}

type resourcesrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesrpcClient(cc grpc.ClientConnInterface) ResourcesrpcClient {
	return &resourcesrpcClient{cc}
}

func (c *resourcesrpcClient) AddClassification(ctx context.Context, in *AddClassificationReq, opts ...grpc.CallOption) (*AddClassificationResp, error) {
	out := new(AddClassificationResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_AddClassification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) UpdateClassification(ctx context.Context, in *UpdateClassificationReq, opts ...grpc.CallOption) (*UpdateClassificationResp, error) {
	out := new(UpdateClassificationResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_UpdateClassification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) DelClassification(ctx context.Context, in *DelClassificationReq, opts ...grpc.CallOption) (*DelClassificationResp, error) {
	out := new(DelClassificationResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_DelClassification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetClassificationById(ctx context.Context, in *GetClassificationByIdReq, opts ...grpc.CallOption) (*GetClassificationByIdResp, error) {
	out := new(GetClassificationByIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetClassificationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) SearchClassificationAll(ctx context.Context, in *SearchClassificationAllReq, opts ...grpc.CallOption) (*SearchClassificationAllResp, error) {
	out := new(SearchClassificationAllResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_SearchClassificationAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetClassificationDataByPages(ctx context.Context, in *ClassificationDataByPagesReq, opts ...grpc.CallOption) (*ClassificationDataByPagesResp, error) {
	out := new(ClassificationDataByPagesResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetClassificationDataByPages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) AddCount(ctx context.Context, in *AddCountReq, opts ...grpc.CallOption) (*AddCountResp, error) {
	out := new(AddCountResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_AddCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*UpdateCountResp, error) {
	out := new(UpdateCountResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_UpdateCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) DelCount(ctx context.Context, in *DelCountReq, opts ...grpc.CallOption) (*DelCountResp, error) {
	out := new(DelCountResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_DelCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetCountById(ctx context.Context, in *GetCountByIdReq, opts ...grpc.CallOption) (*GetCountByIdResp, error) {
	out := new(GetCountByIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetCountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetCountByUId(ctx context.Context, in *GetCountByUIdReq, opts ...grpc.CallOption) (*GetCountByUIdResp, error) {
	out := new(GetCountByUIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetCountByUId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) AddFile(ctx context.Context, in *AddFileReq, opts ...grpc.CallOption) (*AddFileResp, error) {
	out := new(AddFileResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_AddFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileResp, error) {
	out := new(UpdateFileResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_UpdateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) DelFile(ctx context.Context, in *DelFileReq, opts ...grpc.CallOption) (*DelFileResp, error) {
	out := new(DelFileResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_DelFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetFileById(ctx context.Context, in *GetFileByIdReq, opts ...grpc.CallOption) (*GetFileByIdResp, error) {
	out := new(GetFileByIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetFileById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) SearchFileConditionPages(ctx context.Context, in *SearchFileConditionReq, opts ...grpc.CallOption) (*SearchFileConditionResp, error) {
	out := new(SearchFileConditionResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_SearchFileConditionPages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) CheckDownloadAllow(ctx context.Context, in *CheckDownloadAllowReq, opts ...grpc.CallOption) (*CheckDownloadAllowResp, error) {
	out := new(CheckDownloadAllowResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_CheckDownloadAllow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetFilResourcesUSerId(ctx context.Context, in *GetFilResourcesUSerIdReq, opts ...grpc.CallOption) (*GetFilResourcesUSerIdResp, error) {
	out := new(GetFilResourcesUSerIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetFilResourcesUSerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) AddOnlineText(ctx context.Context, in *AddOnlineTextReq, opts ...grpc.CallOption) (*AddOnlineTextResp, error) {
	out := new(AddOnlineTextResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_AddOnlineText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) UpdateOnlineText(ctx context.Context, in *UpdateOnlineTextReq, opts ...grpc.CallOption) (*UpdateOnlineTextResp, error) {
	out := new(UpdateOnlineTextResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_UpdateOnlineText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) DelOnlineText(ctx context.Context, in *DelOnlineTextReq, opts ...grpc.CallOption) (*DelOnlineTextResp, error) {
	out := new(DelOnlineTextResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_DelOnlineText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetOnlineTextById(ctx context.Context, in *GetOnlineTextByIdReq, opts ...grpc.CallOption) (*GetOnlineTextByIdResp, error) {
	out := new(GetOnlineTextByIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetOnlineTextById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) SearchOnlineConditionText(ctx context.Context, in *SearchOnlineConditionTextReq, opts ...grpc.CallOption) (*SearchOnlineTextConditionResp, error) {
	out := new(SearchOnlineTextConditionResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_SearchOnlineConditionText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) AddResComment(ctx context.Context, in *AddResCommentReq, opts ...grpc.CallOption) (*AddResCommentResp, error) {
	out := new(AddResCommentResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_AddResComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) UpdateResComment(ctx context.Context, in *UpdateResCommentReq, opts ...grpc.CallOption) (*UpdateResCommentResp, error) {
	out := new(UpdateResCommentResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_UpdateResComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) DelResComment(ctx context.Context, in *DelResCommentReq, opts ...grpc.CallOption) (*DelResCommentResp, error) {
	out := new(DelResCommentResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_DelResComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) GetResCommentById(ctx context.Context, in *GetResCommentByIdReq, opts ...grpc.CallOption) (*GetResCommentByIdResp, error) {
	out := new(GetResCommentByIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_GetResCommentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesrpcClient) SearchResCommentByUserOrResId(ctx context.Context, in *SearchResCommentByUserOrResIdReq, opts ...grpc.CallOption) (*SearchResCommentByUserOrResIdResp, error) {
	out := new(SearchResCommentByUserOrResIdResp)
	err := c.cc.Invoke(ctx, Resourcesrpc_SearchResCommentByUserOrResId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesrpcServer is the server API for Resourcesrpc service.
// All implementations must embed UnimplementedResourcesrpcServer
// for forward compatibility
type ResourcesrpcServer interface {
	//-----------------------资源分类信息-----------------------
	AddClassification(context.Context, *AddClassificationReq) (*AddClassificationResp, error)
	UpdateClassification(context.Context, *UpdateClassificationReq) (*UpdateClassificationResp, error)
	DelClassification(context.Context, *DelClassificationReq) (*DelClassificationResp, error)
	GetClassificationById(context.Context, *GetClassificationByIdReq) (*GetClassificationByIdResp, error)
	// 查询全部分类
	SearchClassificationAll(context.Context, *SearchClassificationAllReq) (*SearchClassificationAllResp, error)
	// 分类查询分类id下的资源
	GetClassificationDataByPages(context.Context, *ClassificationDataByPagesReq) (*ClassificationDataByPagesResp, error)
	//-----------------------用户上传资源量统计信息-----------------------
	AddCount(context.Context, *AddCountReq) (*AddCountResp, error)
	UpdateCount(context.Context, *UpdateCountReq) (*UpdateCountResp, error)
	DelCount(context.Context, *DelCountReq) (*DelCountResp, error)
	GetCountById(context.Context, *GetCountByIdReq) (*GetCountByIdResp, error)
	GetCountByUId(context.Context, *GetCountByUIdReq) (*GetCountByUIdResp, error)
	//-----------------------文件资源存储表（非文本类型）-----------------------
	AddFile(context.Context, *AddFileReq) (*AddFileResp, error)
	UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileResp, error)
	DelFile(context.Context, *DelFileReq) (*DelFileResp, error)
	GetFileById(context.Context, *GetFileByIdReq) (*GetFileByIdResp, error)
	// 多条件查询（大类，用户id / 全部文件中筛选）
	SearchFileConditionPages(context.Context, *SearchFileConditionReq) (*SearchFileConditionResp, error)
	// 检查文件是否允许下载
	CheckDownloadAllow(context.Context, *CheckDownloadAllowReq) (*CheckDownloadAllowResp, error)
	GetFilResourcesUSerId(context.Context, *GetFilResourcesUSerIdReq) (*GetFilResourcesUSerIdResp, error)
	//-----------------------在线文本资源信息-----------------------
	AddOnlineText(context.Context, *AddOnlineTextReq) (*AddOnlineTextResp, error)
	UpdateOnlineText(context.Context, *UpdateOnlineTextReq) (*UpdateOnlineTextResp, error)
	DelOnlineText(context.Context, *DelOnlineTextReq) (*DelOnlineTextResp, error)
	GetOnlineTextById(context.Context, *GetOnlineTextByIdReq) (*GetOnlineTextByIdResp, error)
	// 多条件查询（大类，用户id / 全部文件中筛选）
	SearchOnlineConditionText(context.Context, *SearchOnlineConditionTextReq) (*SearchOnlineTextConditionResp, error)
	//-----------------------资源评论信息-----------------------
	AddResComment(context.Context, *AddResCommentReq) (*AddResCommentResp, error)
	UpdateResComment(context.Context, *UpdateResCommentReq) (*UpdateResCommentResp, error)
	DelResComment(context.Context, *DelResCommentReq) (*DelResCommentResp, error)
	GetResCommentById(context.Context, *GetResCommentByIdReq) (*GetResCommentByIdResp, error)
	// 查询某一个资源下评论 ， 查询用户全部评论
	SearchResCommentByUserOrResId(context.Context, *SearchResCommentByUserOrResIdReq) (*SearchResCommentByUserOrResIdResp, error)
	mustEmbedUnimplementedResourcesrpcServer()
}

// UnimplementedResourcesrpcServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesrpcServer struct {
}

func (UnimplementedResourcesrpcServer) AddClassification(context.Context, *AddClassificationReq) (*AddClassificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassification not implemented")
}
func (UnimplementedResourcesrpcServer) UpdateClassification(context.Context, *UpdateClassificationReq) (*UpdateClassificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassification not implemented")
}
func (UnimplementedResourcesrpcServer) DelClassification(context.Context, *DelClassificationReq) (*DelClassificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClassification not implemented")
}
func (UnimplementedResourcesrpcServer) GetClassificationById(context.Context, *GetClassificationByIdReq) (*GetClassificationByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassificationById not implemented")
}
func (UnimplementedResourcesrpcServer) SearchClassificationAll(context.Context, *SearchClassificationAllReq) (*SearchClassificationAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClassificationAll not implemented")
}
func (UnimplementedResourcesrpcServer) GetClassificationDataByPages(context.Context, *ClassificationDataByPagesReq) (*ClassificationDataByPagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassificationDataByPages not implemented")
}
func (UnimplementedResourcesrpcServer) AddCount(context.Context, *AddCountReq) (*AddCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCount not implemented")
}
func (UnimplementedResourcesrpcServer) UpdateCount(context.Context, *UpdateCountReq) (*UpdateCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCount not implemented")
}
func (UnimplementedResourcesrpcServer) DelCount(context.Context, *DelCountReq) (*DelCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCount not implemented")
}
func (UnimplementedResourcesrpcServer) GetCountById(context.Context, *GetCountByIdReq) (*GetCountByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountById not implemented")
}
func (UnimplementedResourcesrpcServer) GetCountByUId(context.Context, *GetCountByUIdReq) (*GetCountByUIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountByUId not implemented")
}
func (UnimplementedResourcesrpcServer) AddFile(context.Context, *AddFileReq) (*AddFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedResourcesrpcServer) UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedResourcesrpcServer) DelFile(context.Context, *DelFileReq) (*DelFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFile not implemented")
}
func (UnimplementedResourcesrpcServer) GetFileById(context.Context, *GetFileByIdReq) (*GetFileByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileById not implemented")
}
func (UnimplementedResourcesrpcServer) SearchFileConditionPages(context.Context, *SearchFileConditionReq) (*SearchFileConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFileConditionPages not implemented")
}
func (UnimplementedResourcesrpcServer) CheckDownloadAllow(context.Context, *CheckDownloadAllowReq) (*CheckDownloadAllowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDownloadAllow not implemented")
}
func (UnimplementedResourcesrpcServer) GetFilResourcesUSerId(context.Context, *GetFilResourcesUSerIdReq) (*GetFilResourcesUSerIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilResourcesUSerId not implemented")
}
func (UnimplementedResourcesrpcServer) AddOnlineText(context.Context, *AddOnlineTextReq) (*AddOnlineTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnlineText not implemented")
}
func (UnimplementedResourcesrpcServer) UpdateOnlineText(context.Context, *UpdateOnlineTextReq) (*UpdateOnlineTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnlineText not implemented")
}
func (UnimplementedResourcesrpcServer) DelOnlineText(context.Context, *DelOnlineTextReq) (*DelOnlineTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnlineText not implemented")
}
func (UnimplementedResourcesrpcServer) GetOnlineTextById(context.Context, *GetOnlineTextByIdReq) (*GetOnlineTextByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineTextById not implemented")
}
func (UnimplementedResourcesrpcServer) SearchOnlineConditionText(context.Context, *SearchOnlineConditionTextReq) (*SearchOnlineTextConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnlineConditionText not implemented")
}
func (UnimplementedResourcesrpcServer) AddResComment(context.Context, *AddResCommentReq) (*AddResCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResComment not implemented")
}
func (UnimplementedResourcesrpcServer) UpdateResComment(context.Context, *UpdateResCommentReq) (*UpdateResCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResComment not implemented")
}
func (UnimplementedResourcesrpcServer) DelResComment(context.Context, *DelResCommentReq) (*DelResCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelResComment not implemented")
}
func (UnimplementedResourcesrpcServer) GetResCommentById(context.Context, *GetResCommentByIdReq) (*GetResCommentByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResCommentById not implemented")
}
func (UnimplementedResourcesrpcServer) SearchResCommentByUserOrResId(context.Context, *SearchResCommentByUserOrResIdReq) (*SearchResCommentByUserOrResIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResCommentByUserOrResId not implemented")
}
func (UnimplementedResourcesrpcServer) mustEmbedUnimplementedResourcesrpcServer() {}

// UnsafeResourcesrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesrpcServer will
// result in compilation errors.
type UnsafeResourcesrpcServer interface {
	mustEmbedUnimplementedResourcesrpcServer()
}

func RegisterResourcesrpcServer(s grpc.ServiceRegistrar, srv ResourcesrpcServer) {
	s.RegisterService(&Resourcesrpc_ServiceDesc, srv)
}

func _Resourcesrpc_AddClassification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).AddClassification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_AddClassification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).AddClassification(ctx, req.(*AddClassificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_UpdateClassification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).UpdateClassification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_UpdateClassification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).UpdateClassification(ctx, req.(*UpdateClassificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_DelClassification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClassificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).DelClassification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_DelClassification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).DelClassification(ctx, req.(*DelClassificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetClassificationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassificationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetClassificationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetClassificationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetClassificationById(ctx, req.(*GetClassificationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_SearchClassificationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClassificationAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).SearchClassificationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_SearchClassificationAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).SearchClassificationAll(ctx, req.(*SearchClassificationAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetClassificationDataByPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassificationDataByPagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetClassificationDataByPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetClassificationDataByPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetClassificationDataByPages(ctx, req.(*ClassificationDataByPagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_AddCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).AddCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_AddCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).AddCount(ctx, req.(*AddCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_UpdateCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).UpdateCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_UpdateCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).UpdateCount(ctx, req.(*UpdateCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_DelCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).DelCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_DelCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).DelCount(ctx, req.(*DelCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetCountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetCountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetCountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetCountById(ctx, req.(*GetCountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetCountByUId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountByUIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetCountByUId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetCountByUId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetCountByUId(ctx, req.(*GetCountByUIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).AddFile(ctx, req.(*AddFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).UpdateFile(ctx, req.(*UpdateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_DelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).DelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_DelFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).DelFile(ctx, req.(*DelFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetFileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetFileById(ctx, req.(*GetFileByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_SearchFileConditionPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFileConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).SearchFileConditionPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_SearchFileConditionPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).SearchFileConditionPages(ctx, req.(*SearchFileConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_CheckDownloadAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDownloadAllowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).CheckDownloadAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_CheckDownloadAllow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).CheckDownloadAllow(ctx, req.(*CheckDownloadAllowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetFilResourcesUSerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilResourcesUSerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetFilResourcesUSerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetFilResourcesUSerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetFilResourcesUSerId(ctx, req.(*GetFilResourcesUSerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_AddOnlineText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnlineTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).AddOnlineText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_AddOnlineText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).AddOnlineText(ctx, req.(*AddOnlineTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_UpdateOnlineText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnlineTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).UpdateOnlineText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_UpdateOnlineText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).UpdateOnlineText(ctx, req.(*UpdateOnlineTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_DelOnlineText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnlineTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).DelOnlineText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_DelOnlineText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).DelOnlineText(ctx, req.(*DelOnlineTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetOnlineTextById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineTextByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetOnlineTextById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetOnlineTextById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetOnlineTextById(ctx, req.(*GetOnlineTextByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_SearchOnlineConditionText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnlineConditionTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).SearchOnlineConditionText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_SearchOnlineConditionText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).SearchOnlineConditionText(ctx, req.(*SearchOnlineConditionTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_AddResComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).AddResComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_AddResComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).AddResComment(ctx, req.(*AddResCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_UpdateResComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).UpdateResComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_UpdateResComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).UpdateResComment(ctx, req.(*UpdateResCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_DelResComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelResCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).DelResComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_DelResComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).DelResComment(ctx, req.(*DelResCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_GetResCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResCommentByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).GetResCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_GetResCommentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).GetResCommentById(ctx, req.(*GetResCommentByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resourcesrpc_SearchResCommentByUserOrResId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResCommentByUserOrResIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesrpcServer).SearchResCommentByUserOrResId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resourcesrpc_SearchResCommentByUserOrResId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesrpcServer).SearchResCommentByUserOrResId(ctx, req.(*SearchResCommentByUserOrResIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Resourcesrpc_ServiceDesc is the grpc.ServiceDesc for Resourcesrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resourcesrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.resourcesrpc",
	HandlerType: (*ResourcesrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClassification",
			Handler:    _Resourcesrpc_AddClassification_Handler,
		},
		{
			MethodName: "UpdateClassification",
			Handler:    _Resourcesrpc_UpdateClassification_Handler,
		},
		{
			MethodName: "DelClassification",
			Handler:    _Resourcesrpc_DelClassification_Handler,
		},
		{
			MethodName: "GetClassificationById",
			Handler:    _Resourcesrpc_GetClassificationById_Handler,
		},
		{
			MethodName: "SearchClassificationAll",
			Handler:    _Resourcesrpc_SearchClassificationAll_Handler,
		},
		{
			MethodName: "GetClassificationDataByPages",
			Handler:    _Resourcesrpc_GetClassificationDataByPages_Handler,
		},
		{
			MethodName: "AddCount",
			Handler:    _Resourcesrpc_AddCount_Handler,
		},
		{
			MethodName: "UpdateCount",
			Handler:    _Resourcesrpc_UpdateCount_Handler,
		},
		{
			MethodName: "DelCount",
			Handler:    _Resourcesrpc_DelCount_Handler,
		},
		{
			MethodName: "GetCountById",
			Handler:    _Resourcesrpc_GetCountById_Handler,
		},
		{
			MethodName: "GetCountByUId",
			Handler:    _Resourcesrpc_GetCountByUId_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _Resourcesrpc_AddFile_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _Resourcesrpc_UpdateFile_Handler,
		},
		{
			MethodName: "DelFile",
			Handler:    _Resourcesrpc_DelFile_Handler,
		},
		{
			MethodName: "GetFileById",
			Handler:    _Resourcesrpc_GetFileById_Handler,
		},
		{
			MethodName: "SearchFileConditionPages",
			Handler:    _Resourcesrpc_SearchFileConditionPages_Handler,
		},
		{
			MethodName: "CheckDownloadAllow",
			Handler:    _Resourcesrpc_CheckDownloadAllow_Handler,
		},
		{
			MethodName: "GetFilResourcesUSerId",
			Handler:    _Resourcesrpc_GetFilResourcesUSerId_Handler,
		},
		{
			MethodName: "AddOnlineText",
			Handler:    _Resourcesrpc_AddOnlineText_Handler,
		},
		{
			MethodName: "UpdateOnlineText",
			Handler:    _Resourcesrpc_UpdateOnlineText_Handler,
		},
		{
			MethodName: "DelOnlineText",
			Handler:    _Resourcesrpc_DelOnlineText_Handler,
		},
		{
			MethodName: "GetOnlineTextById",
			Handler:    _Resourcesrpc_GetOnlineTextById_Handler,
		},
		{
			MethodName: "SearchOnlineConditionText",
			Handler:    _Resourcesrpc_SearchOnlineConditionText_Handler,
		},
		{
			MethodName: "AddResComment",
			Handler:    _Resourcesrpc_AddResComment_Handler,
		},
		{
			MethodName: "UpdateResComment",
			Handler:    _Resourcesrpc_UpdateResComment_Handler,
		},
		{
			MethodName: "DelResComment",
			Handler:    _Resourcesrpc_DelResComment_Handler,
		},
		{
			MethodName: "GetResCommentById",
			Handler:    _Resourcesrpc_GetResCommentById_Handler,
		},
		{
			MethodName: "SearchResCommentByUserOrResId",
			Handler:    _Resourcesrpc_SearchResCommentByUserOrResId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resourcesrpc.proto",
}
