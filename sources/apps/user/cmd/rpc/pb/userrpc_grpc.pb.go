// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: userrpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Userrpc_AddMajor_FullMethodName                = "/pb.userrpc/AddMajor"
	Userrpc_UpdateMajor_FullMethodName             = "/pb.userrpc/UpdateMajor"
	Userrpc_DelMajor_FullMethodName                = "/pb.userrpc/DelMajor"
	Userrpc_GetMajorById_FullMethodName            = "/pb.userrpc/GetMajorById"
	Userrpc_GetMajorPages_FullMethodName           = "/pb.userrpc/GetMajorPages"
	Userrpc_AddThird_FullMethodName                = "/pb.userrpc/AddThird"
	Userrpc_UpdateThird_FullMethodName             = "/pb.userrpc/UpdateThird"
	Userrpc_DelThird_FullMethodName                = "/pb.userrpc/DelThird"
	Userrpc_GetThirdById_FullMethodName            = "/pb.userrpc/GetThirdById"
	Userrpc_GetThirdByUserIdAndType_FullMethodName = "/pb.userrpc/GetThirdByUserIdAndType"
	Userrpc_GetThirdBindData_FullMethodName        = "/pb.userrpc/GetThirdBindData"
	Userrpc_AddThirdData_FullMethodName            = "/pb.userrpc/AddThirdData"
	Userrpc_UpdateThirdData_FullMethodName         = "/pb.userrpc/UpdateThirdData"
	Userrpc_DelThirdData_FullMethodName            = "/pb.userrpc/DelThirdData"
	Userrpc_GetThirdDataByThirdId_FullMethodName   = "/pb.userrpc/GetThirdDataByThirdId"
	Userrpc_GetThirdDataById_FullMethodName        = "/pb.userrpc/GetThirdDataById"
	Userrpc_AddUser_FullMethodName                 = "/pb.userrpc/AddUser"
	Userrpc_UpdateUser_FullMethodName              = "/pb.userrpc/UpdateUser"
	Userrpc_DelUser_FullMethodName                 = "/pb.userrpc/DelUser"
	Userrpc_GetUserById_FullMethodName             = "/pb.userrpc/GetUserById"
	Userrpc_GetUserByPhoneOrEmail_FullMethodName   = "/pb.userrpc/GetUserByPhoneOrEmail"
)

// UserrpcClient is the client API for Userrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserrpcClient interface {
	// -----------------------用户专业统计表-----------------------
	AddMajor(ctx context.Context, in *AddMajorReq, opts ...grpc.CallOption) (*AddMajorResp, error)
	UpdateMajor(ctx context.Context, in *UpdateMajorReq, opts ...grpc.CallOption) (*UpdateMajorResp, error)
	DelMajor(ctx context.Context, in *DelMajorReq, opts ...grpc.CallOption) (*DelMajorResp, error)
	GetMajorById(ctx context.Context, in *GetMajorByIdReq, opts ...grpc.CallOption) (*GetMajorByIdResp, error)
	GetMajorPages(ctx context.Context, in *GetMajorPagesReq, opts ...grpc.CallOption) (*GetMajorPagesResp, error)
	// -----------------------用户三方关联数据-----------------------
	AddThird(ctx context.Context, in *AddThirdReq, opts ...grpc.CallOption) (*AddThirdResp, error)
	UpdateThird(ctx context.Context, in *UpdateThirdReq, opts ...grpc.CallOption) (*UpdateThirdResp, error)
	DelThird(ctx context.Context, in *DelThirdReq, opts ...grpc.CallOption) (*DelThirdResp, error)
	GetThirdById(ctx context.Context, in *GetThirdByIdReq, opts ...grpc.CallOption) (*GetThirdByIdResp, error)
	GetThirdByUserIdAndType(ctx context.Context, in *GetThirdByUserIdAndTypeReq, opts ...grpc.CallOption) (*GetThirdByUserIdAndTypeResp, error)
	GetThirdBindData(ctx context.Context, in *GetThirdBindDataReq, opts ...grpc.CallOption) (*GetThirdBindDataResp, error)
	// -----------------------第三方用户数据-----------------------
	AddThirdData(ctx context.Context, in *AddThirdDataReq, opts ...grpc.CallOption) (*AddThirdDataResp, error)
	UpdateThirdData(ctx context.Context, in *UpdateThirdDataReq, opts ...grpc.CallOption) (*UpdateThirdDataResp, error)
	DelThirdData(ctx context.Context, in *DelThirdDataReq, opts ...grpc.CallOption) (*DelThirdDataResp, error)
	GetThirdDataByThirdId(ctx context.Context, in *GetThirdDataByThirdIdReq, opts ...grpc.CallOption) (*GetThirdDataByIdResp, error)
	GetThirdDataById(ctx context.Context, in *GetThirdDataByIdReq, opts ...grpc.CallOption) (*GetThirdDataByIdResp, error)
	// -----------------------用户数据基本信息表-----------------------
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	GetUserByPhoneOrEmail(ctx context.Context, in *GetUserByPhoneOrEmailReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
}

type userrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserrpcClient(cc grpc.ClientConnInterface) UserrpcClient {
	return &userrpcClient{cc}
}

func (c *userrpcClient) AddMajor(ctx context.Context, in *AddMajorReq, opts ...grpc.CallOption) (*AddMajorResp, error) {
	out := new(AddMajorResp)
	err := c.cc.Invoke(ctx, Userrpc_AddMajor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) UpdateMajor(ctx context.Context, in *UpdateMajorReq, opts ...grpc.CallOption) (*UpdateMajorResp, error) {
	out := new(UpdateMajorResp)
	err := c.cc.Invoke(ctx, Userrpc_UpdateMajor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) DelMajor(ctx context.Context, in *DelMajorReq, opts ...grpc.CallOption) (*DelMajorResp, error) {
	out := new(DelMajorResp)
	err := c.cc.Invoke(ctx, Userrpc_DelMajor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetMajorById(ctx context.Context, in *GetMajorByIdReq, opts ...grpc.CallOption) (*GetMajorByIdResp, error) {
	out := new(GetMajorByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetMajorById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetMajorPages(ctx context.Context, in *GetMajorPagesReq, opts ...grpc.CallOption) (*GetMajorPagesResp, error) {
	out := new(GetMajorPagesResp)
	err := c.cc.Invoke(ctx, Userrpc_GetMajorPages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) AddThird(ctx context.Context, in *AddThirdReq, opts ...grpc.CallOption) (*AddThirdResp, error) {
	out := new(AddThirdResp)
	err := c.cc.Invoke(ctx, Userrpc_AddThird_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) UpdateThird(ctx context.Context, in *UpdateThirdReq, opts ...grpc.CallOption) (*UpdateThirdResp, error) {
	out := new(UpdateThirdResp)
	err := c.cc.Invoke(ctx, Userrpc_UpdateThird_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) DelThird(ctx context.Context, in *DelThirdReq, opts ...grpc.CallOption) (*DelThirdResp, error) {
	out := new(DelThirdResp)
	err := c.cc.Invoke(ctx, Userrpc_DelThird_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetThirdById(ctx context.Context, in *GetThirdByIdReq, opts ...grpc.CallOption) (*GetThirdByIdResp, error) {
	out := new(GetThirdByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetThirdById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetThirdByUserIdAndType(ctx context.Context, in *GetThirdByUserIdAndTypeReq, opts ...grpc.CallOption) (*GetThirdByUserIdAndTypeResp, error) {
	out := new(GetThirdByUserIdAndTypeResp)
	err := c.cc.Invoke(ctx, Userrpc_GetThirdByUserIdAndType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetThirdBindData(ctx context.Context, in *GetThirdBindDataReq, opts ...grpc.CallOption) (*GetThirdBindDataResp, error) {
	out := new(GetThirdBindDataResp)
	err := c.cc.Invoke(ctx, Userrpc_GetThirdBindData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) AddThirdData(ctx context.Context, in *AddThirdDataReq, opts ...grpc.CallOption) (*AddThirdDataResp, error) {
	out := new(AddThirdDataResp)
	err := c.cc.Invoke(ctx, Userrpc_AddThirdData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) UpdateThirdData(ctx context.Context, in *UpdateThirdDataReq, opts ...grpc.CallOption) (*UpdateThirdDataResp, error) {
	out := new(UpdateThirdDataResp)
	err := c.cc.Invoke(ctx, Userrpc_UpdateThirdData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) DelThirdData(ctx context.Context, in *DelThirdDataReq, opts ...grpc.CallOption) (*DelThirdDataResp, error) {
	out := new(DelThirdDataResp)
	err := c.cc.Invoke(ctx, Userrpc_DelThirdData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetThirdDataByThirdId(ctx context.Context, in *GetThirdDataByThirdIdReq, opts ...grpc.CallOption) (*GetThirdDataByIdResp, error) {
	out := new(GetThirdDataByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetThirdDataByThirdId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetThirdDataById(ctx context.Context, in *GetThirdDataByIdReq, opts ...grpc.CallOption) (*GetThirdDataByIdResp, error) {
	out := new(GetThirdDataByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetThirdDataById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, Userrpc_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, Userrpc_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	out := new(DelUserResp)
	err := c.cc.Invoke(ctx, Userrpc_DelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcClient) GetUserByPhoneOrEmail(ctx context.Context, in *GetUserByPhoneOrEmailReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, Userrpc_GetUserByPhoneOrEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserrpcServer is the server API for Userrpc service.
// All implementations must embed UnimplementedUserrpcServer
// for forward compatibility
type UserrpcServer interface {
	// -----------------------用户专业统计表-----------------------
	AddMajor(context.Context, *AddMajorReq) (*AddMajorResp, error)
	UpdateMajor(context.Context, *UpdateMajorReq) (*UpdateMajorResp, error)
	DelMajor(context.Context, *DelMajorReq) (*DelMajorResp, error)
	GetMajorById(context.Context, *GetMajorByIdReq) (*GetMajorByIdResp, error)
	GetMajorPages(context.Context, *GetMajorPagesReq) (*GetMajorPagesResp, error)
	// -----------------------用户三方关联数据-----------------------
	AddThird(context.Context, *AddThirdReq) (*AddThirdResp, error)
	UpdateThird(context.Context, *UpdateThirdReq) (*UpdateThirdResp, error)
	DelThird(context.Context, *DelThirdReq) (*DelThirdResp, error)
	GetThirdById(context.Context, *GetThirdByIdReq) (*GetThirdByIdResp, error)
	GetThirdByUserIdAndType(context.Context, *GetThirdByUserIdAndTypeReq) (*GetThirdByUserIdAndTypeResp, error)
	GetThirdBindData(context.Context, *GetThirdBindDataReq) (*GetThirdBindDataResp, error)
	// -----------------------第三方用户数据-----------------------
	AddThirdData(context.Context, *AddThirdDataReq) (*AddThirdDataResp, error)
	UpdateThirdData(context.Context, *UpdateThirdDataReq) (*UpdateThirdDataResp, error)
	DelThirdData(context.Context, *DelThirdDataReq) (*DelThirdDataResp, error)
	GetThirdDataByThirdId(context.Context, *GetThirdDataByThirdIdReq) (*GetThirdDataByIdResp, error)
	GetThirdDataById(context.Context, *GetThirdDataByIdReq) (*GetThirdDataByIdResp, error)
	// -----------------------用户数据基本信息表-----------------------
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DelUser(context.Context, *DelUserReq) (*DelUserResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	GetUserByPhoneOrEmail(context.Context, *GetUserByPhoneOrEmailReq) (*GetUserByIdResp, error)
	mustEmbedUnimplementedUserrpcServer()
}

// UnimplementedUserrpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserrpcServer struct {
}

func (UnimplementedUserrpcServer) AddMajor(context.Context, *AddMajorReq) (*AddMajorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMajor not implemented")
}
func (UnimplementedUserrpcServer) UpdateMajor(context.Context, *UpdateMajorReq) (*UpdateMajorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMajor not implemented")
}
func (UnimplementedUserrpcServer) DelMajor(context.Context, *DelMajorReq) (*DelMajorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMajor not implemented")
}
func (UnimplementedUserrpcServer) GetMajorById(context.Context, *GetMajorByIdReq) (*GetMajorByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMajorById not implemented")
}
func (UnimplementedUserrpcServer) GetMajorPages(context.Context, *GetMajorPagesReq) (*GetMajorPagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMajorPages not implemented")
}
func (UnimplementedUserrpcServer) AddThird(context.Context, *AddThirdReq) (*AddThirdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddThird not implemented")
}
func (UnimplementedUserrpcServer) UpdateThird(context.Context, *UpdateThirdReq) (*UpdateThirdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThird not implemented")
}
func (UnimplementedUserrpcServer) DelThird(context.Context, *DelThirdReq) (*DelThirdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelThird not implemented")
}
func (UnimplementedUserrpcServer) GetThirdById(context.Context, *GetThirdByIdReq) (*GetThirdByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdById not implemented")
}
func (UnimplementedUserrpcServer) GetThirdByUserIdAndType(context.Context, *GetThirdByUserIdAndTypeReq) (*GetThirdByUserIdAndTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdByUserIdAndType not implemented")
}
func (UnimplementedUserrpcServer) GetThirdBindData(context.Context, *GetThirdBindDataReq) (*GetThirdBindDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdBindData not implemented")
}
func (UnimplementedUserrpcServer) AddThirdData(context.Context, *AddThirdDataReq) (*AddThirdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddThirdData not implemented")
}
func (UnimplementedUserrpcServer) UpdateThirdData(context.Context, *UpdateThirdDataReq) (*UpdateThirdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThirdData not implemented")
}
func (UnimplementedUserrpcServer) DelThirdData(context.Context, *DelThirdDataReq) (*DelThirdDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelThirdData not implemented")
}
func (UnimplementedUserrpcServer) GetThirdDataByThirdId(context.Context, *GetThirdDataByThirdIdReq) (*GetThirdDataByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdDataByThirdId not implemented")
}
func (UnimplementedUserrpcServer) GetThirdDataById(context.Context, *GetThirdDataByIdReq) (*GetThirdDataByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdDataById not implemented")
}
func (UnimplementedUserrpcServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserrpcServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserrpcServer) DelUser(context.Context, *DelUserReq) (*DelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserrpcServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserrpcServer) GetUserByPhoneOrEmail(context.Context, *GetUserByPhoneOrEmailReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhoneOrEmail not implemented")
}
func (UnimplementedUserrpcServer) mustEmbedUnimplementedUserrpcServer() {}

// UnsafeUserrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserrpcServer will
// result in compilation errors.
type UnsafeUserrpcServer interface {
	mustEmbedUnimplementedUserrpcServer()
}

func RegisterUserrpcServer(s grpc.ServiceRegistrar, srv UserrpcServer) {
	s.RegisterService(&Userrpc_ServiceDesc, srv)
}

func _Userrpc_AddMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMajorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).AddMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_AddMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).AddMajor(ctx, req.(*AddMajorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_UpdateMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMajorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).UpdateMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_UpdateMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).UpdateMajor(ctx, req.(*UpdateMajorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_DelMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMajorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).DelMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_DelMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).DelMajor(ctx, req.(*DelMajorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetMajorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMajorByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetMajorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetMajorById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetMajorById(ctx, req.(*GetMajorByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetMajorPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMajorPagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetMajorPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetMajorPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetMajorPages(ctx, req.(*GetMajorPagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_AddThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThirdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).AddThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_AddThird_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).AddThird(ctx, req.(*AddThirdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_UpdateThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThirdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).UpdateThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_UpdateThird_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).UpdateThird(ctx, req.(*UpdateThirdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_DelThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelThirdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).DelThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_DelThird_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).DelThird(ctx, req.(*DelThirdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetThirdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetThirdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetThirdById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetThirdById(ctx, req.(*GetThirdByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetThirdByUserIdAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdByUserIdAndTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetThirdByUserIdAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetThirdByUserIdAndType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetThirdByUserIdAndType(ctx, req.(*GetThirdByUserIdAndTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetThirdBindData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdBindDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetThirdBindData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetThirdBindData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetThirdBindData(ctx, req.(*GetThirdBindDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_AddThirdData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThirdDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).AddThirdData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_AddThirdData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).AddThirdData(ctx, req.(*AddThirdDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_UpdateThirdData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThirdDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).UpdateThirdData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_UpdateThirdData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).UpdateThirdData(ctx, req.(*UpdateThirdDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_DelThirdData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelThirdDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).DelThirdData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_DelThirdData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).DelThirdData(ctx, req.(*DelThirdDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetThirdDataByThirdId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdDataByThirdIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetThirdDataByThirdId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetThirdDataByThirdId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetThirdDataByThirdId(ctx, req.(*GetThirdDataByThirdIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetThirdDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetThirdDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetThirdDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetThirdDataById(ctx, req.(*GetThirdDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_DelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpc_GetUserByPhoneOrEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneOrEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcServer).GetUserByPhoneOrEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userrpc_GetUserByPhoneOrEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcServer).GetUserByPhoneOrEmail(ctx, req.(*GetUserByPhoneOrEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Userrpc_ServiceDesc is the grpc.ServiceDesc for Userrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userrpc",
	HandlerType: (*UserrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMajor",
			Handler:    _Userrpc_AddMajor_Handler,
		},
		{
			MethodName: "UpdateMajor",
			Handler:    _Userrpc_UpdateMajor_Handler,
		},
		{
			MethodName: "DelMajor",
			Handler:    _Userrpc_DelMajor_Handler,
		},
		{
			MethodName: "GetMajorById",
			Handler:    _Userrpc_GetMajorById_Handler,
		},
		{
			MethodName: "GetMajorPages",
			Handler:    _Userrpc_GetMajorPages_Handler,
		},
		{
			MethodName: "AddThird",
			Handler:    _Userrpc_AddThird_Handler,
		},
		{
			MethodName: "UpdateThird",
			Handler:    _Userrpc_UpdateThird_Handler,
		},
		{
			MethodName: "DelThird",
			Handler:    _Userrpc_DelThird_Handler,
		},
		{
			MethodName: "GetThirdById",
			Handler:    _Userrpc_GetThirdById_Handler,
		},
		{
			MethodName: "GetThirdByUserIdAndType",
			Handler:    _Userrpc_GetThirdByUserIdAndType_Handler,
		},
		{
			MethodName: "GetThirdBindData",
			Handler:    _Userrpc_GetThirdBindData_Handler,
		},
		{
			MethodName: "AddThirdData",
			Handler:    _Userrpc_AddThirdData_Handler,
		},
		{
			MethodName: "UpdateThirdData",
			Handler:    _Userrpc_UpdateThirdData_Handler,
		},
		{
			MethodName: "DelThirdData",
			Handler:    _Userrpc_DelThirdData_Handler,
		},
		{
			MethodName: "GetThirdDataByThirdId",
			Handler:    _Userrpc_GetThirdDataByThirdId_Handler,
		},
		{
			MethodName: "GetThirdDataById",
			Handler:    _Userrpc_GetThirdDataById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Userrpc_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Userrpc_UpdateUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _Userrpc_DelUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Userrpc_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByPhoneOrEmail",
			Handler:    _Userrpc_GetUserByPhoneOrEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userrpc.proto",
}
