// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/user/cmd/rpc/internal/model"
)

func newThirdData(db *gorm.DB, opts ...gen.DOOption) thirdData {
	_thirdData := thirdData{}

	_thirdData.thirdDataDo.UseDB(db, opts...)
	_thirdData.thirdDataDo.UseModel(&model.ThirdData{})

	tableName := _thirdData.thirdDataDo.TableName()
	_thirdData.ALL = field.NewAsterisk(tableName)
	_thirdData.ID = field.NewInt64(tableName, "id")
	_thirdData.ThirdID = field.NewInt64(tableName, "third_id")
	_thirdData.Name = field.NewString(tableName, "name")
	_thirdData.Sign = field.NewString(tableName, "sign")
	_thirdData.CreateTime = field.NewTime(tableName, "create_time")
	_thirdData.UpdateTime = field.NewTime(tableName, "update_time")
	_thirdData.DeleteTime = field.NewField(tableName, "delete_time")

	_thirdData.fillFieldMap()

	return _thirdData
}

type thirdData struct {
	thirdDataDo thirdDataDo

	ALL        field.Asterisk
	ID         field.Int64  // 三方数据自增id
	ThirdID    field.Int64  // 三方数据id
	Name       field.String // 三方用户名称
	Sign       field.String // 三方数据签名
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	DeleteTime field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t thirdData) Table(newTableName string) *thirdData {
	t.thirdDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdData) As(alias string) *thirdData {
	t.thirdDataDo.DO = *(t.thirdDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdData) updateTableName(table string) *thirdData {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ThirdID = field.NewInt64(table, "third_id")
	t.Name = field.NewString(table, "name")
	t.Sign = field.NewString(table, "sign")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.DeleteTime = field.NewField(table, "delete_time")

	t.fillFieldMap()

	return t
}

func (t *thirdData) WithContext(ctx context.Context) IThirdDataDo {
	return t.thirdDataDo.WithContext(ctx)
}

func (t thirdData) TableName() string { return t.thirdDataDo.TableName() }

func (t thirdData) Alias() string { return t.thirdDataDo.Alias() }

func (t *thirdData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["third_id"] = t.ThirdID
	t.fieldMap["name"] = t.Name
	t.fieldMap["sign"] = t.Sign
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["delete_time"] = t.DeleteTime
}

func (t thirdData) clone(db *gorm.DB) thirdData {
	t.thirdDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdData) replaceDB(db *gorm.DB) thirdData {
	t.thirdDataDo.ReplaceDB(db)
	return t
}

type thirdDataDo struct{ gen.DO }

type IThirdDataDo interface {
	gen.SubQuery
	Debug() IThirdDataDo
	WithContext(ctx context.Context) IThirdDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThirdDataDo
	WriteDB() IThirdDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThirdDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThirdDataDo
	Not(conds ...gen.Condition) IThirdDataDo
	Or(conds ...gen.Condition) IThirdDataDo
	Select(conds ...field.Expr) IThirdDataDo
	Where(conds ...gen.Condition) IThirdDataDo
	Order(conds ...field.Expr) IThirdDataDo
	Distinct(cols ...field.Expr) IThirdDataDo
	Omit(cols ...field.Expr) IThirdDataDo
	Join(table schema.Tabler, on ...field.Expr) IThirdDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThirdDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThirdDataDo
	Group(cols ...field.Expr) IThirdDataDo
	Having(conds ...gen.Condition) IThirdDataDo
	Limit(limit int) IThirdDataDo
	Offset(offset int) IThirdDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdDataDo
	Unscoped() IThirdDataDo
	Create(values ...*model.ThirdData) error
	CreateInBatches(values []*model.ThirdData, batchSize int) error
	Save(values ...*model.ThirdData) error
	First() (*model.ThirdData, error)
	Take() (*model.ThirdData, error)
	Last() (*model.ThirdData, error)
	Find() ([]*model.ThirdData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdData, err error)
	FindInBatches(result *[]*model.ThirdData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThirdData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThirdDataDo
	Assign(attrs ...field.AssignExpr) IThirdDataDo
	Joins(fields ...field.RelationField) IThirdDataDo
	Preload(fields ...field.RelationField) IThirdDataDo
	FirstOrInit() (*model.ThirdData, error)
	FirstOrCreate() (*model.ThirdData, error)
	FindByPage(offset int, limit int) (result []*model.ThirdData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThirdDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t thirdDataDo) Debug() IThirdDataDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdDataDo) WithContext(ctx context.Context) IThirdDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdDataDo) ReadDB() IThirdDataDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdDataDo) WriteDB() IThirdDataDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdDataDo) Session(config *gorm.Session) IThirdDataDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdDataDo) Clauses(conds ...clause.Expression) IThirdDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdDataDo) Returning(value interface{}, columns ...string) IThirdDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdDataDo) Not(conds ...gen.Condition) IThirdDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdDataDo) Or(conds ...gen.Condition) IThirdDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdDataDo) Select(conds ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdDataDo) Where(conds ...gen.Condition) IThirdDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IThirdDataDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t thirdDataDo) Order(conds ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdDataDo) Distinct(cols ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdDataDo) Omit(cols ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdDataDo) Join(table schema.Tabler, on ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdDataDo) Group(cols ...field.Expr) IThirdDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdDataDo) Having(conds ...gen.Condition) IThirdDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdDataDo) Limit(limit int) IThirdDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdDataDo) Offset(offset int) IThirdDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdDataDo) Unscoped() IThirdDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdDataDo) Create(values ...*model.ThirdData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdDataDo) CreateInBatches(values []*model.ThirdData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdDataDo) Save(values ...*model.ThirdData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdDataDo) First() (*model.ThirdData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdData), nil
	}
}

func (t thirdDataDo) Take() (*model.ThirdData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdData), nil
	}
}

func (t thirdDataDo) Last() (*model.ThirdData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdData), nil
	}
}

func (t thirdDataDo) Find() ([]*model.ThirdData, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdData), err
}

func (t thirdDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdData, err error) {
	buf := make([]*model.ThirdData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdDataDo) FindInBatches(result *[]*model.ThirdData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdDataDo) Attrs(attrs ...field.AssignExpr) IThirdDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdDataDo) Assign(attrs ...field.AssignExpr) IThirdDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdDataDo) Joins(fields ...field.RelationField) IThirdDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdDataDo) Preload(fields ...field.RelationField) IThirdDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdDataDo) FirstOrInit() (*model.ThirdData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdData), nil
	}
}

func (t thirdDataDo) FirstOrCreate() (*model.ThirdData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdData), nil
	}
}

func (t thirdDataDo) FindByPage(offset int, limit int) (result []*model.ThirdData, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdDataDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdDataDo) Delete(models ...*model.ThirdData) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdDataDo) withDO(do gen.Dao) *thirdDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
