// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/school-share-buy-backend/apps/user/cmd/rpc/internal/model"
)

func newUserAcc(db *gorm.DB, opts ...gen.DOOption) userAcc {
	_userAcc := userAcc{}

	_userAcc.userAccDo.UseDB(db, opts...)
	_userAcc.userAccDo.UseModel(&model.UserAcc{})

	tableName := _userAcc.userAccDo.TableName()
	_userAcc.ALL = field.NewAsterisk(tableName)
	_userAcc.ID = field.NewInt64(tableName, "id")
	_userAcc.UserID = field.NewInt64(tableName, "user_id")
	_userAcc.Type = field.NewInt64(tableName, "type")
	_userAcc.AccessToken = field.NewString(tableName, "access_token")
	_userAcc.RefereshToken = field.NewString(tableName, "referesh_token")
	_userAcc.AcctokenExpire = field.NewInt64(tableName, "acctoken_expire")
	_userAcc.CreateTime = field.NewTime(tableName, "create_time")
	_userAcc.UpdateTime = field.NewTime(tableName, "update_time")
	_userAcc.DeleteTime = field.NewField(tableName, "delete_time")

	_userAcc.fillFieldMap()

	return _userAcc
}

type userAcc struct {
	userAccDo userAccDo

	ALL            field.Asterisk
	ID             field.Int64  // 用户三方数据自增ID
	UserID         field.Int64  // 用户id
	Type           field.Int64  // 微信0、QQ1、Github2、Gitee3
	AccessToken    field.String // 默认访问密钥
	RefereshToken  field.String // 刷新token
	AcctokenExpire field.Int64  // 过期时间
	CreateTime     field.Time   // 创建时间
	UpdateTime     field.Time   // 更新时间
	DeleteTime     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u userAcc) Table(newTableName string) *userAcc {
	u.userAccDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAcc) As(alias string) *userAcc {
	u.userAccDo.DO = *(u.userAccDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAcc) updateTableName(table string) *userAcc {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Type = field.NewInt64(table, "type")
	u.AccessToken = field.NewString(table, "access_token")
	u.RefereshToken = field.NewString(table, "referesh_token")
	u.AcctokenExpire = field.NewInt64(table, "acctoken_expire")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.DeleteTime = field.NewField(table, "delete_time")

	u.fillFieldMap()

	return u
}

func (u *userAcc) WithContext(ctx context.Context) IUserAccDo { return u.userAccDo.WithContext(ctx) }

func (u userAcc) TableName() string { return u.userAccDo.TableName() }

func (u userAcc) Alias() string { return u.userAccDo.Alias() }

func (u *userAcc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAcc) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["type"] = u.Type
	u.fieldMap["access_token"] = u.AccessToken
	u.fieldMap["referesh_token"] = u.RefereshToken
	u.fieldMap["acctoken_expire"] = u.AcctokenExpire
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["delete_time"] = u.DeleteTime
}

func (u userAcc) clone(db *gorm.DB) userAcc {
	u.userAccDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAcc) replaceDB(db *gorm.DB) userAcc {
	u.userAccDo.ReplaceDB(db)
	return u
}

type userAccDo struct{ gen.DO }

type IUserAccDo interface {
	gen.SubQuery
	Debug() IUserAccDo
	WithContext(ctx context.Context) IUserAccDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAccDo
	WriteDB() IUserAccDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAccDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAccDo
	Not(conds ...gen.Condition) IUserAccDo
	Or(conds ...gen.Condition) IUserAccDo
	Select(conds ...field.Expr) IUserAccDo
	Where(conds ...gen.Condition) IUserAccDo
	Order(conds ...field.Expr) IUserAccDo
	Distinct(cols ...field.Expr) IUserAccDo
	Omit(cols ...field.Expr) IUserAccDo
	Join(table schema.Tabler, on ...field.Expr) IUserAccDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAccDo
	Group(cols ...field.Expr) IUserAccDo
	Having(conds ...gen.Condition) IUserAccDo
	Limit(limit int) IUserAccDo
	Offset(offset int) IUserAccDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccDo
	Unscoped() IUserAccDo
	Create(values ...*model.UserAcc) error
	CreateInBatches(values []*model.UserAcc, batchSize int) error
	Save(values ...*model.UserAcc) error
	First() (*model.UserAcc, error)
	Take() (*model.UserAcc, error)
	Last() (*model.UserAcc, error)
	Find() ([]*model.UserAcc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAcc, err error)
	FindInBatches(result *[]*model.UserAcc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAcc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAccDo
	Assign(attrs ...field.AssignExpr) IUserAccDo
	Joins(fields ...field.RelationField) IUserAccDo
	Preload(fields ...field.RelationField) IUserAccDo
	FirstOrInit() (*model.UserAcc, error)
	FirstOrCreate() (*model.UserAcc, error)
	FindByPage(offset int, limit int) (result []*model.UserAcc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAccDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAccDo) Debug() IUserAccDo {
	return u.withDO(u.DO.Debug())
}

func (u userAccDo) WithContext(ctx context.Context) IUserAccDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAccDo) ReadDB() IUserAccDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAccDo) WriteDB() IUserAccDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAccDo) Session(config *gorm.Session) IUserAccDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAccDo) Clauses(conds ...clause.Expression) IUserAccDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAccDo) Returning(value interface{}, columns ...string) IUserAccDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAccDo) Not(conds ...gen.Condition) IUserAccDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAccDo) Or(conds ...gen.Condition) IUserAccDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAccDo) Select(conds ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAccDo) Where(conds ...gen.Condition) IUserAccDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAccDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserAccDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAccDo) Order(conds ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAccDo) Distinct(cols ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAccDo) Omit(cols ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAccDo) Join(table schema.Tabler, on ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAccDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAccDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAccDo) Group(cols ...field.Expr) IUserAccDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAccDo) Having(conds ...gen.Condition) IUserAccDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAccDo) Limit(limit int) IUserAccDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAccDo) Offset(offset int) IUserAccDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAccDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAccDo) Unscoped() IUserAccDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAccDo) Create(values ...*model.UserAcc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAccDo) CreateInBatches(values []*model.UserAcc, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAccDo) Save(values ...*model.UserAcc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAccDo) First() (*model.UserAcc, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAcc), nil
	}
}

func (u userAccDo) Take() (*model.UserAcc, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAcc), nil
	}
}

func (u userAccDo) Last() (*model.UserAcc, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAcc), nil
	}
}

func (u userAccDo) Find() ([]*model.UserAcc, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAcc), err
}

func (u userAccDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAcc, err error) {
	buf := make([]*model.UserAcc, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAccDo) FindInBatches(result *[]*model.UserAcc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAccDo) Attrs(attrs ...field.AssignExpr) IUserAccDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAccDo) Assign(attrs ...field.AssignExpr) IUserAccDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAccDo) Joins(fields ...field.RelationField) IUserAccDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAccDo) Preload(fields ...field.RelationField) IUserAccDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAccDo) FirstOrInit() (*model.UserAcc, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAcc), nil
	}
}

func (u userAccDo) FirstOrCreate() (*model.UserAcc, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAcc), nil
	}
}

func (u userAccDo) FindByPage(offset int, limit int) (result []*model.UserAcc, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAccDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAccDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAccDo) Delete(models ...*model.UserAcc) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAccDo) withDO(do gen.Dao) *userAccDo {
	u.DO = *do.(*gen.DO)
	return u
}
